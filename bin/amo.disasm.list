
../bin/amo.elf:     file format elf32-littlearm


Disassembly of section .text:

08000000 <g_pfnVectors>:
 8000000:	00 50 00 20 3d 04 00 08 81 04 00 08 81 04 00 08     .P. =...........
 8000010:	81 04 00 08 81 04 00 08 81 04 00 08 00 00 00 00     ................
	...
 800002c:	81 04 00 08 81 04 00 08 00 00 00 00 81 04 00 08     ................
 800003c:	81 04 00 08 81 04 00 08 81 04 00 08 81 04 00 08     ................
 800004c:	81 04 00 08 81 04 00 08 81 04 00 08 81 04 00 08     ................
 800005c:	81 04 00 08 81 04 00 08 81 04 00 08 81 04 00 08     ................
 800006c:	81 04 00 08 81 04 00 08 81 04 00 08 81 04 00 08     ................
 800007c:	81 04 00 08 81 04 00 08 81 04 00 08 81 04 00 08     ................
 800008c:	81 04 00 08 81 04 00 08 81 04 00 08 81 04 00 08     ................
 800009c:	81 04 00 08 81 04 00 08 81 04 00 08 81 04 00 08     ................
 80000ac:	81 04 00 08 81 04 00 08 81 04 00 08 81 04 00 08     ................
 80000bc:	81 04 00 08 81 04 00 08 81 04 00 08 81 04 00 08     ................
 80000cc:	81 04 00 08 81 04 00 08 81 04 00 08 81 04 00 08     ................
 80000dc:	81 04 00 08 81 04 00 08 81 04 00 08 81 04 00 08     ................
	...
 8000108:	5f f8 08 f1                                         _...

0800010c <main>:
unsigned char usart2_getc(void);
void usart2_send_str(char *s) ;


int main()
{
 800010c:	b580      	push	{r7, lr}
 800010e:	af00      	add	r7, sp, #0
	// Enable USART2 clock
	SET_BIT(RCC->APB1ENR ,RCC_APB1ENR_USART2EN) ;
 8000110:	4b13      	ldr	r3, [pc, #76]	; (8000160 <main+0x54>)
 8000112:	69db      	ldr	r3, [r3, #28]
 8000114:	4a12      	ldr	r2, [pc, #72]	; (8000160 <main+0x54>)
 8000116:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800011a:	61d3      	str	r3, [r2, #28]

	// Enable GPIOA clock
	SET_BIT(RCC->APB2ENR ,RCC_APB2ENR_IOPAEN) ;
 800011c:	4b10      	ldr	r3, [pc, #64]	; (8000160 <main+0x54>)
 800011e:	699b      	ldr	r3, [r3, #24]
 8000120:	4a0f      	ldr	r2, [pc, #60]	; (8000160 <main+0x54>)
 8000122:	f043 0304 	orr.w	r3, r3, #4
 8000126:	6193      	str	r3, [r2, #24]

	// Config PA2 as Tx(alt output) ,PA3 as Rx (input)
	GPIOA->CRL = 0x44448B44 ; 
 8000128:	4b0e      	ldr	r3, [pc, #56]	; (8000164 <main+0x58>)
 800012a:	4a0f      	ldr	r2, [pc, #60]	; (8000168 <main+0x5c>)
 800012c:	601a      	str	r2, [r3, #0]

	// Pull-up rx
	SET_BIT(GPIOA->ODR ,GPIO_ODR_ODR3) ;
 800012e:	4b0d      	ldr	r3, [pc, #52]	; (8000164 <main+0x58>)
 8000130:	68db      	ldr	r3, [r3, #12]
 8000132:	4a0c      	ldr	r2, [pc, #48]	; (8000164 <main+0x58>)
 8000134:	f043 0308 	orr.w	r3, r3, #8
 8000138:	60d3      	str	r3, [r2, #12]

	// Enable USART2 ,RX ,TX
	SET_BIT(USART2->CR1 ,USART_CR1_UE | USART_CR1_RE | USART_CR1_TE) ;
 800013a:	4b0c      	ldr	r3, [pc, #48]	; (800016c <main+0x60>)
 800013c:	899b      	ldrh	r3, [r3, #12]
 800013e:	b29b      	uxth	r3, r3
 8000140:	4a0a      	ldr	r2, [pc, #40]	; (800016c <main+0x60>)
 8000142:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000146:	f043 030c 	orr.w	r3, r3, #12
 800014a:	b29b      	uxth	r3, r3
 800014c:	8193      	strh	r3, [r2, #12]

	// Setting Baud Rate
	USART2->BRR = 3750; 
 800014e:	4b07      	ldr	r3, [pc, #28]	; (800016c <main+0x60>)
 8000150:	f640 62a6 	movw	r2, #3750	; 0xea6
 8000154:	811a      	strh	r2, [r3, #8]

	usart2_send_str("Hello World !\r\n") ;
 8000156:	4806      	ldr	r0, [pc, #24]	; (8000170 <main+0x64>)
 8000158:	f000 f824 	bl	80001a4 <usart2_send_str>

	for(;;) ;
 800015c:	e7fe      	b.n	800015c <main+0x50>
 800015e:	bf00      	nop
 8000160:	40021000 	.word	0x40021000
 8000164:	40010800 	.word	0x40010800
 8000168:	44448b44 	.word	0x44448b44
 800016c:	40004400 	.word	0x40004400
 8000170:	08000484 	.word	0x08000484

08000174 <usart2_putc>:
	return 0 ;
}


void usart2_putc(unsigned char c)
{
 8000174:	b480      	push	{r7}
 8000176:	b083      	sub	sp, #12
 8000178:	af00      	add	r7, sp, #0
 800017a:	4603      	mov	r3, r0
 800017c:	71fb      	strb	r3, [r7, #7]
	while (((USART2->SR) & USART_SR_TXE) == 0) ;
 800017e:	bf00      	nop
 8000180:	4b07      	ldr	r3, [pc, #28]	; (80001a0 <usart2_putc+0x2c>)
 8000182:	881b      	ldrh	r3, [r3, #0]
 8000184:	b29b      	uxth	r3, r3
 8000186:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800018a:	2b00      	cmp	r3, #0
 800018c:	d0f8      	beq.n	8000180 <usart2_putc+0xc>

	USART2->DR = c;
 800018e:	4b04      	ldr	r3, [pc, #16]	; (80001a0 <usart2_putc+0x2c>)
 8000190:	79fa      	ldrb	r2, [r7, #7]
 8000192:	b292      	uxth	r2, r2
 8000194:	809a      	strh	r2, [r3, #4]
}
 8000196:	bf00      	nop
 8000198:	370c      	adds	r7, #12
 800019a:	46bd      	mov	sp, r7
 800019c:	bc80      	pop	{r7}
 800019e:	4770      	bx	lr
 80001a0:	40004400 	.word	0x40004400

080001a4 <usart2_send_str>:


void usart2_send_str(char *s)
{
 80001a4:	b580      	push	{r7, lr}
 80001a6:	b082      	sub	sp, #8
 80001a8:	af00      	add	r7, sp, #0
 80001aa:	6078      	str	r0, [r7, #4]
	while (*s) {
 80001ac:	e007      	b.n	80001be <usart2_send_str+0x1a>
		usart2_putc(*s) ;
 80001ae:	687b      	ldr	r3, [r7, #4]
 80001b0:	781b      	ldrb	r3, [r3, #0]
 80001b2:	4618      	mov	r0, r3
 80001b4:	f7ff ffde 	bl	8000174 <usart2_putc>

		s++ ;
 80001b8:	687b      	ldr	r3, [r7, #4]
 80001ba:	3301      	adds	r3, #1
 80001bc:	607b      	str	r3, [r7, #4]
	while (*s) {
 80001be:	687b      	ldr	r3, [r7, #4]
 80001c0:	781b      	ldrb	r3, [r3, #0]
 80001c2:	2b00      	cmp	r3, #0
 80001c4:	d1f3      	bne.n	80001ae <usart2_send_str+0xa>
	}
}
 80001c6:	bf00      	nop
 80001c8:	bf00      	nop
 80001ca:	3708      	adds	r7, #8
 80001cc:	46bd      	mov	sp, r7
 80001ce:	bd80      	pop	{r7, pc}
 80001d0:	08000494 	.word	0x08000494
 80001d4:	20000000 	.word	0x20000000
 80001d8:	20000014 	.word	0x20000014
 80001dc:	20000014 	.word	0x20000014
 80001e0:	20000014 	.word	0x20000014

080001e4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80001e4:	b580      	push	{r7, lr}
 80001e6:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80001e8:	4b15      	ldr	r3, [pc, #84]	; (8000240 <SystemInit+0x5c>)
 80001ea:	681b      	ldr	r3, [r3, #0]
 80001ec:	4a14      	ldr	r2, [pc, #80]	; (8000240 <SystemInit+0x5c>)
 80001ee:	f043 0301 	orr.w	r3, r3, #1
 80001f2:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 80001f4:	4b12      	ldr	r3, [pc, #72]	; (8000240 <SystemInit+0x5c>)
 80001f6:	685a      	ldr	r2, [r3, #4]
 80001f8:	4911      	ldr	r1, [pc, #68]	; (8000240 <SystemInit+0x5c>)
 80001fa:	4b12      	ldr	r3, [pc, #72]	; (8000244 <SystemInit+0x60>)
 80001fc:	4013      	ands	r3, r2
 80001fe:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000200:	4b0f      	ldr	r3, [pc, #60]	; (8000240 <SystemInit+0x5c>)
 8000202:	681b      	ldr	r3, [r3, #0]
 8000204:	4a0e      	ldr	r2, [pc, #56]	; (8000240 <SystemInit+0x5c>)
 8000206:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800020a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800020e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000210:	4b0b      	ldr	r3, [pc, #44]	; (8000240 <SystemInit+0x5c>)
 8000212:	681b      	ldr	r3, [r3, #0]
 8000214:	4a0a      	ldr	r2, [pc, #40]	; (8000240 <SystemInit+0x5c>)
 8000216:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800021a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 800021c:	4b08      	ldr	r3, [pc, #32]	; (8000240 <SystemInit+0x5c>)
 800021e:	685b      	ldr	r3, [r3, #4]
 8000220:	4a07      	ldr	r2, [pc, #28]	; (8000240 <SystemInit+0x5c>)
 8000222:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000226:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8000228:	4b05      	ldr	r3, [pc, #20]	; (8000240 <SystemInit+0x5c>)
 800022a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800022e:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 8000230:	f000 f87e 	bl	8000330 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000234:	4b04      	ldr	r3, [pc, #16]	; (8000248 <SystemInit+0x64>)
 8000236:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800023a:	609a      	str	r2, [r3, #8]
#endif 
}
 800023c:	bf00      	nop
 800023e:	bd80      	pop	{r7, pc}
 8000240:	40021000 	.word	0x40021000
 8000244:	f8ff0000 	.word	0xf8ff0000
 8000248:	e000ed00 	.word	0xe000ed00

0800024c <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
 800024c:	b480      	push	{r7}
 800024e:	b085      	sub	sp, #20
 8000250:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllmull = 0, pllsource = 0;
 8000252:	2300      	movs	r3, #0
 8000254:	60fb      	str	r3, [r7, #12]
 8000256:	2300      	movs	r3, #0
 8000258:	60bb      	str	r3, [r7, #8]
 800025a:	2300      	movs	r3, #0
 800025c:	607b      	str	r3, [r7, #4]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || (defined STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif /* STM32F10X_LD_VL or STM32F10X_MD_VL or STM32F10X_HD_VL */
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800025e:	4b2f      	ldr	r3, [pc, #188]	; (800031c <SystemCoreClockUpdate+0xd0>)
 8000260:	685b      	ldr	r3, [r3, #4]
 8000262:	f003 030c 	and.w	r3, r3, #12
 8000266:	60fb      	str	r3, [r7, #12]
  
  switch (tmp)
 8000268:	68fb      	ldr	r3, [r7, #12]
 800026a:	2b08      	cmp	r3, #8
 800026c:	d011      	beq.n	8000292 <SystemCoreClockUpdate+0x46>
 800026e:	68fb      	ldr	r3, [r7, #12]
 8000270:	2b08      	cmp	r3, #8
 8000272:	d83a      	bhi.n	80002ea <SystemCoreClockUpdate+0x9e>
 8000274:	68fb      	ldr	r3, [r7, #12]
 8000276:	2b00      	cmp	r3, #0
 8000278:	d003      	beq.n	8000282 <SystemCoreClockUpdate+0x36>
 800027a:	68fb      	ldr	r3, [r7, #12]
 800027c:	2b04      	cmp	r3, #4
 800027e:	d004      	beq.n	800028a <SystemCoreClockUpdate+0x3e>
 8000280:	e033      	b.n	80002ea <SystemCoreClockUpdate+0x9e>
  {
    case 0x00:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 8000282:	4b27      	ldr	r3, [pc, #156]	; (8000320 <SystemCoreClockUpdate+0xd4>)
 8000284:	4a27      	ldr	r2, [pc, #156]	; (8000324 <SystemCoreClockUpdate+0xd8>)
 8000286:	601a      	str	r2, [r3, #0]
      break;
 8000288:	e033      	b.n	80002f2 <SystemCoreClockUpdate+0xa6>
    case 0x04:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
 800028a:	4b25      	ldr	r3, [pc, #148]	; (8000320 <SystemCoreClockUpdate+0xd4>)
 800028c:	4a25      	ldr	r2, [pc, #148]	; (8000324 <SystemCoreClockUpdate+0xd8>)
 800028e:	601a      	str	r2, [r3, #0]
      break;
 8000290:	e02f      	b.n	80002f2 <SystemCoreClockUpdate+0xa6>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 8000292:	4b22      	ldr	r3, [pc, #136]	; (800031c <SystemCoreClockUpdate+0xd0>)
 8000294:	685b      	ldr	r3, [r3, #4]
 8000296:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800029a:	60bb      	str	r3, [r7, #8]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 800029c:	4b1f      	ldr	r3, [pc, #124]	; (800031c <SystemCoreClockUpdate+0xd0>)
 800029e:	685b      	ldr	r3, [r3, #4]
 80002a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80002a4:	607b      	str	r3, [r7, #4]
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
 80002a6:	68bb      	ldr	r3, [r7, #8]
 80002a8:	0c9b      	lsrs	r3, r3, #18
 80002aa:	3302      	adds	r3, #2
 80002ac:	60bb      	str	r3, [r7, #8]
      
      if (pllsource == 0x00)
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d106      	bne.n	80002c2 <SystemCoreClockUpdate+0x76>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
 80002b4:	68bb      	ldr	r3, [r7, #8]
 80002b6:	4a1c      	ldr	r2, [pc, #112]	; (8000328 <SystemCoreClockUpdate+0xdc>)
 80002b8:	fb02 f303 	mul.w	r3, r2, r3
 80002bc:	4a18      	ldr	r2, [pc, #96]	; (8000320 <SystemCoreClockUpdate+0xd4>)
 80002be:	6013      	str	r3, [r2, #0]
          pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8 ) + 2; 
          SystemCoreClock = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
 80002c0:	e017      	b.n	80002f2 <SystemCoreClockUpdate+0xa6>
        if ((RCC->CFGR & RCC_CFGR_PLLXTPRE) != (uint32_t)RESET)
 80002c2:	4b16      	ldr	r3, [pc, #88]	; (800031c <SystemCoreClockUpdate+0xd0>)
 80002c4:	685b      	ldr	r3, [r3, #4]
 80002c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d006      	beq.n	80002dc <SystemCoreClockUpdate+0x90>
          SystemCoreClock = (HSE_VALUE >> 1) * pllmull;
 80002ce:	68bb      	ldr	r3, [r7, #8]
 80002d0:	4a15      	ldr	r2, [pc, #84]	; (8000328 <SystemCoreClockUpdate+0xdc>)
 80002d2:	fb02 f303 	mul.w	r3, r2, r3
 80002d6:	4a12      	ldr	r2, [pc, #72]	; (8000320 <SystemCoreClockUpdate+0xd4>)
 80002d8:	6013      	str	r3, [r2, #0]
      break;
 80002da:	e00a      	b.n	80002f2 <SystemCoreClockUpdate+0xa6>
          SystemCoreClock = HSE_VALUE * pllmull;
 80002dc:	68bb      	ldr	r3, [r7, #8]
 80002de:	4a11      	ldr	r2, [pc, #68]	; (8000324 <SystemCoreClockUpdate+0xd8>)
 80002e0:	fb02 f303 	mul.w	r3, r2, r3
 80002e4:	4a0e      	ldr	r2, [pc, #56]	; (8000320 <SystemCoreClockUpdate+0xd4>)
 80002e6:	6013      	str	r3, [r2, #0]
      break;
 80002e8:	e003      	b.n	80002f2 <SystemCoreClockUpdate+0xa6>

    default:
      SystemCoreClock = HSI_VALUE;
 80002ea:	4b0d      	ldr	r3, [pc, #52]	; (8000320 <SystemCoreClockUpdate+0xd4>)
 80002ec:	4a0d      	ldr	r2, [pc, #52]	; (8000324 <SystemCoreClockUpdate+0xd8>)
 80002ee:	601a      	str	r2, [r3, #0]
      break;
 80002f0:	bf00      	nop
  }
  
  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 80002f2:	4b0a      	ldr	r3, [pc, #40]	; (800031c <SystemCoreClockUpdate+0xd0>)
 80002f4:	685b      	ldr	r3, [r3, #4]
 80002f6:	091b      	lsrs	r3, r3, #4
 80002f8:	f003 030f 	and.w	r3, r3, #15
 80002fc:	4a0b      	ldr	r2, [pc, #44]	; (800032c <SystemCoreClockUpdate+0xe0>)
 80002fe:	5cd3      	ldrb	r3, [r2, r3]
 8000300:	b2db      	uxtb	r3, r3
 8000302:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;  
 8000304:	4b06      	ldr	r3, [pc, #24]	; (8000320 <SystemCoreClockUpdate+0xd4>)
 8000306:	681a      	ldr	r2, [r3, #0]
 8000308:	68fb      	ldr	r3, [r7, #12]
 800030a:	fa22 f303 	lsr.w	r3, r2, r3
 800030e:	4a04      	ldr	r2, [pc, #16]	; (8000320 <SystemCoreClockUpdate+0xd4>)
 8000310:	6013      	str	r3, [r2, #0]
}
 8000312:	bf00      	nop
 8000314:	3714      	adds	r7, #20
 8000316:	46bd      	mov	sp, r7
 8000318:	bc80      	pop	{r7}
 800031a:	4770      	bx	lr
 800031c:	40021000 	.word	0x40021000
 8000320:	20000000 	.word	0x20000000
 8000324:	007a1200 	.word	0x007a1200
 8000328:	003d0900 	.word	0x003d0900
 800032c:	20000004 	.word	0x20000004

08000330 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 8000334:	f000 f802 	bl	800033c <SetSysClockTo72>
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 8000338:	bf00      	nop
 800033a:	bd80      	pop	{r7, pc}

0800033c <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 800033c:	b480      	push	{r7}
 800033e:	b083      	sub	sp, #12
 8000340:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000342:	2300      	movs	r3, #0
 8000344:	607b      	str	r3, [r7, #4]
 8000346:	2300      	movs	r3, #0
 8000348:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 800034a:	4b3a      	ldr	r3, [pc, #232]	; (8000434 <SetSysClockTo72+0xf8>)
 800034c:	681b      	ldr	r3, [r3, #0]
 800034e:	4a39      	ldr	r2, [pc, #228]	; (8000434 <SetSysClockTo72+0xf8>)
 8000350:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000354:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000356:	4b37      	ldr	r3, [pc, #220]	; (8000434 <SetSysClockTo72+0xf8>)
 8000358:	681b      	ldr	r3, [r3, #0]
 800035a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800035e:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	3301      	adds	r3, #1
 8000364:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000366:	683b      	ldr	r3, [r7, #0]
 8000368:	2b00      	cmp	r3, #0
 800036a:	d103      	bne.n	8000374 <SetSysClockTo72+0x38>
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000372:	d1f0      	bne.n	8000356 <SetSysClockTo72+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000374:	4b2f      	ldr	r3, [pc, #188]	; (8000434 <SetSysClockTo72+0xf8>)
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800037c:	2b00      	cmp	r3, #0
 800037e:	d002      	beq.n	8000386 <SetSysClockTo72+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8000380:	2301      	movs	r3, #1
 8000382:	603b      	str	r3, [r7, #0]
 8000384:	e001      	b.n	800038a <SetSysClockTo72+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8000386:	2300      	movs	r3, #0
 8000388:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 800038a:	683b      	ldr	r3, [r7, #0]
 800038c:	2b01      	cmp	r3, #1
 800038e:	d14b      	bne.n	8000428 <SetSysClockTo72+0xec>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8000390:	4b29      	ldr	r3, [pc, #164]	; (8000438 <SetSysClockTo72+0xfc>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	4a28      	ldr	r2, [pc, #160]	; (8000438 <SetSysClockTo72+0xfc>)
 8000396:	f043 0310 	orr.w	r3, r3, #16
 800039a:	6013      	str	r3, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 800039c:	4b26      	ldr	r3, [pc, #152]	; (8000438 <SetSysClockTo72+0xfc>)
 800039e:	681b      	ldr	r3, [r3, #0]
 80003a0:	4a25      	ldr	r2, [pc, #148]	; (8000438 <SetSysClockTo72+0xfc>)
 80003a2:	f023 0303 	bic.w	r3, r3, #3
 80003a6:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 80003a8:	4b23      	ldr	r3, [pc, #140]	; (8000438 <SetSysClockTo72+0xfc>)
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	4a22      	ldr	r2, [pc, #136]	; (8000438 <SetSysClockTo72+0xfc>)
 80003ae:	f043 0302 	orr.w	r3, r3, #2
 80003b2:	6013      	str	r3, [r2, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 80003b4:	4b1f      	ldr	r3, [pc, #124]	; (8000434 <SetSysClockTo72+0xf8>)
 80003b6:	4a1f      	ldr	r2, [pc, #124]	; (8000434 <SetSysClockTo72+0xf8>)
 80003b8:	685b      	ldr	r3, [r3, #4]
 80003ba:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 80003bc:	4b1d      	ldr	r3, [pc, #116]	; (8000434 <SetSysClockTo72+0xf8>)
 80003be:	4a1d      	ldr	r2, [pc, #116]	; (8000434 <SetSysClockTo72+0xf8>)
 80003c0:	685b      	ldr	r3, [r3, #4]
 80003c2:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 80003c4:	4b1b      	ldr	r3, [pc, #108]	; (8000434 <SetSysClockTo72+0xf8>)
 80003c6:	685b      	ldr	r3, [r3, #4]
 80003c8:	4a1a      	ldr	r2, [pc, #104]	; (8000434 <SetSysClockTo72+0xf8>)
 80003ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80003ce:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 80003d0:	4b18      	ldr	r3, [pc, #96]	; (8000434 <SetSysClockTo72+0xf8>)
 80003d2:	685b      	ldr	r3, [r3, #4]
 80003d4:	4a17      	ldr	r2, [pc, #92]	; (8000434 <SetSysClockTo72+0xf8>)
 80003d6:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 80003da:	6053      	str	r3, [r2, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 80003dc:	4b15      	ldr	r3, [pc, #84]	; (8000434 <SetSysClockTo72+0xf8>)
 80003de:	685b      	ldr	r3, [r3, #4]
 80003e0:	4a14      	ldr	r2, [pc, #80]	; (8000434 <SetSysClockTo72+0xf8>)
 80003e2:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 80003e6:	6053      	str	r3, [r2, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 80003e8:	4b12      	ldr	r3, [pc, #72]	; (8000434 <SetSysClockTo72+0xf8>)
 80003ea:	681b      	ldr	r3, [r3, #0]
 80003ec:	4a11      	ldr	r2, [pc, #68]	; (8000434 <SetSysClockTo72+0xf8>)
 80003ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80003f2:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80003f4:	bf00      	nop
 80003f6:	4b0f      	ldr	r3, [pc, #60]	; (8000434 <SetSysClockTo72+0xf8>)
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d0f9      	beq.n	80003f6 <SetSysClockTo72+0xba>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000402:	4b0c      	ldr	r3, [pc, #48]	; (8000434 <SetSysClockTo72+0xf8>)
 8000404:	685b      	ldr	r3, [r3, #4]
 8000406:	4a0b      	ldr	r2, [pc, #44]	; (8000434 <SetSysClockTo72+0xf8>)
 8000408:	f023 0303 	bic.w	r3, r3, #3
 800040c:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 800040e:	4b09      	ldr	r3, [pc, #36]	; (8000434 <SetSysClockTo72+0xf8>)
 8000410:	685b      	ldr	r3, [r3, #4]
 8000412:	4a08      	ldr	r2, [pc, #32]	; (8000434 <SetSysClockTo72+0xf8>)
 8000414:	f043 0302 	orr.w	r3, r3, #2
 8000418:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 800041a:	bf00      	nop
 800041c:	4b05      	ldr	r3, [pc, #20]	; (8000434 <SetSysClockTo72+0xf8>)
 800041e:	685b      	ldr	r3, [r3, #4]
 8000420:	f003 030c 	and.w	r3, r3, #12
 8000424:	2b08      	cmp	r3, #8
 8000426:	d1f9      	bne.n	800041c <SetSysClockTo72+0xe0>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
 8000428:	bf00      	nop
 800042a:	370c      	adds	r7, #12
 800042c:	46bd      	mov	sp, r7
 800042e:	bc80      	pop	{r7}
 8000430:	4770      	bx	lr
 8000432:	bf00      	nop
 8000434:	40021000 	.word	0x40021000
 8000438:	40022000 	.word	0x40022000

0800043c <Reset_Handler>:
 800043c:	2100      	movs	r1, #0
 800043e:	e003      	b.n	8000448 <LoopCopyDataInit>

08000440 <CopyDataInit>:
 8000440:	4b0a      	ldr	r3, [pc, #40]	; (800046c <LoopFillZerobss+0x10>)
 8000442:	585b      	ldr	r3, [r3, r1]
 8000444:	5043      	str	r3, [r0, r1]
 8000446:	3104      	adds	r1, #4

08000448 <LoopCopyDataInit>:
 8000448:	4809      	ldr	r0, [pc, #36]	; (8000470 <LoopFillZerobss+0x14>)
 800044a:	4b0a      	ldr	r3, [pc, #40]	; (8000474 <LoopFillZerobss+0x18>)
 800044c:	1842      	adds	r2, r0, r1
 800044e:	429a      	cmp	r2, r3
 8000450:	d3f6      	bcc.n	8000440 <CopyDataInit>
 8000452:	4a09      	ldr	r2, [pc, #36]	; (8000478 <LoopFillZerobss+0x1c>)
 8000454:	e002      	b.n	800045c <LoopFillZerobss>

08000456 <FillZerobss>:
 8000456:	2300      	movs	r3, #0
 8000458:	f842 3b04 	str.w	r3, [r2], #4

0800045c <LoopFillZerobss>:
 800045c:	4b07      	ldr	r3, [pc, #28]	; (800047c <LoopFillZerobss+0x20>)
 800045e:	429a      	cmp	r2, r3
 8000460:	d3f9      	bcc.n	8000456 <FillZerobss>
 8000462:	f7ff febf 	bl	80001e4 <SystemInit>
 8000466:	f7ff fe51 	bl	800010c <main>
 800046a:	4770      	bx	lr
 800046c:	08000494 	.word	0x08000494
 8000470:	20000000 	.word	0x20000000
 8000474:	20000014 	.word	0x20000014
 8000478:	20000014 	.word	0x20000014
 800047c:	20000014 	.word	0x20000014

08000480 <ADC1_2_IRQHandler>:
 8000480:	e7fe      	b.n	8000480 <ADC1_2_IRQHandler>
 8000482:	0000      	movs	r0, r0
 8000484:	6c6c6548 	.word	0x6c6c6548
 8000488:	6f57206f 	.word	0x6f57206f
 800048c:	20646c72 	.word	0x20646c72
 8000490:	000a0d21 	.word	0x000a0d21
