
../bin/amo.elf:     file format elf32-littlearm


Disassembly of section .text:

08000000 <g_pfnVectors>:
 8000000:	00 50 00 20 99 0b 00 08 dd 0b 00 08 dd 0b 00 08     .P. ............
 8000010:	dd 0b 00 08 dd 0b 00 08 dd 0b 00 08 00 00 00 00     ................
	...
 800002c:	dd 0b 00 08 dd 0b 00 08 00 00 00 00 dd 0b 00 08     ................
 800003c:	e5 03 00 08 dd 0b 00 08 dd 0b 00 08 dd 0b 00 08     ................
 800004c:	dd 0b 00 08 dd 0b 00 08 dd 0b 00 08 dd 0b 00 08     ................
 800005c:	dd 0b 00 08 dd 0b 00 08 dd 0b 00 08 dd 0b 00 08     ................
 800006c:	dd 0b 00 08 dd 0b 00 08 dd 0b 00 08 dd 0b 00 08     ................
 800007c:	dd 0b 00 08 dd 0b 00 08 dd 0b 00 08 dd 0b 00 08     ................
 800008c:	dd 0b 00 08 dd 0b 00 08 dd 0b 00 08 dd 0b 00 08     ................
 800009c:	dd 0b 00 08 dd 0b 00 08 dd 0b 00 08 dd 0b 00 08     ................
 80000ac:	dd 0b 00 08 dd 0b 00 08 dd 0b 00 08 dd 0b 00 08     ................
 80000bc:	dd 0b 00 08 dd 0b 00 08 dd 0b 00 08 dd 0b 00 08     ................
 80000cc:	dd 0b 00 08 dd 0b 00 08 dd 0b 00 08 dd 0b 00 08     ................
 80000dc:	dd 0b 00 08 dd 0b 00 08 dd 0b 00 08 dd 0b 00 08     ................
	...
 8000108:	5f f8 08 f1                                         _...

0800010c <gpio_clk_enable>:
#include "gpio.h"
#include "../lib/common.h"


void gpio_clk_enable(void)
{
 800010c:	b480      	push	{r7}
 800010e:	af00      	add	r7, sp, #0
	// Enable the clocks for GPIOA ports  ,RCC->APB2ENR |= RCC_APB2ENR_IOPAEN ;	
	// Enable the clks for GPIOB ,RCC->APB2ENR |= RCC_APB2ENR_IOPBEN ;	
	SET_BIT(RCC->APB2ENR ,RCC_APB2ENR_IOPAEN) ;
 8000110:	4b0a      	ldr	r3, [pc, #40]	; (800013c <gpio_clk_enable+0x30>)
 8000112:	699b      	ldr	r3, [r3, #24]
 8000114:	4a09      	ldr	r2, [pc, #36]	; (800013c <gpio_clk_enable+0x30>)
 8000116:	f043 0304 	orr.w	r3, r3, #4
 800011a:	6193      	str	r3, [r2, #24]
	SET_BIT(RCC->APB2ENR ,RCC_APB2ENR_IOPBEN) ;
 800011c:	4b07      	ldr	r3, [pc, #28]	; (800013c <gpio_clk_enable+0x30>)
 800011e:	699b      	ldr	r3, [r3, #24]
 8000120:	4a06      	ldr	r2, [pc, #24]	; (800013c <gpio_clk_enable+0x30>)
 8000122:	f043 0308 	orr.w	r3, r3, #8
 8000126:	6193      	str	r3, [r2, #24]
	SET_BIT(RCC->APB2ENR ,RCC_APB2ENR_IOPCEN) ;
 8000128:	4b04      	ldr	r3, [pc, #16]	; (800013c <gpio_clk_enable+0x30>)
 800012a:	699b      	ldr	r3, [r3, #24]
 800012c:	4a03      	ldr	r2, [pc, #12]	; (800013c <gpio_clk_enable+0x30>)
 800012e:	f043 0310 	orr.w	r3, r3, #16
 8000132:	6193      	str	r3, [r2, #24]
}
 8000134:	bf00      	nop
 8000136:	46bd      	mov	sp, r7
 8000138:	bc80      	pop	{r7}
 800013a:	4770      	bx	lr
 800013c:	40021000 	.word	0x40021000

08000140 <config_gpio_mode_bits>:


int config_gpio_mode_bits(GPIO_TypeDef * GPIOx ,uint8_t pin ,uint8_t mode_bits)
{
 8000140:	b480      	push	{r7}
 8000142:	b083      	sub	sp, #12
 8000144:	af00      	add	r7, sp, #0
 8000146:	6078      	str	r0, [r7, #4]
 8000148:	460b      	mov	r3, r1
 800014a:	70fb      	strb	r3, [r7, #3]
 800014c:	4613      	mov	r3, r2
 800014e:	70bb      	strb	r3, [r7, #2]
	if (pin <= 7) {
 8000150:	78fb      	ldrb	r3, [r7, #3]
 8000152:	2b07      	cmp	r3, #7
 8000154:	d815      	bhi.n	8000182 <config_gpio_mode_bits+0x42>
		// clear original bit first
		GPIOx->CRL &= (uint32_t)~(1 << (4 * pin)) ;
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	681b      	ldr	r3, [r3, #0]
 800015a:	78fa      	ldrb	r2, [r7, #3]
 800015c:	0092      	lsls	r2, r2, #2
 800015e:	2101      	movs	r1, #1
 8000160:	fa01 f202 	lsl.w	r2, r1, r2
 8000164:	43d2      	mvns	r2, r2
 8000166:	401a      	ands	r2, r3
 8000168:	687b      	ldr	r3, [r7, #4]
 800016a:	601a      	str	r2, [r3, #0]
		
		GPIOx->CRL |= (uint32_t)(mode_bits << (4 * pin)) ;
 800016c:	687b      	ldr	r3, [r7, #4]
 800016e:	681b      	ldr	r3, [r3, #0]
 8000170:	78b9      	ldrb	r1, [r7, #2]
 8000172:	78fa      	ldrb	r2, [r7, #3]
 8000174:	0092      	lsls	r2, r2, #2
 8000176:	fa01 f202 	lsl.w	r2, r1, r2
 800017a:	431a      	orrs	r2, r3
 800017c:	687b      	ldr	r3, [r7, #4]
 800017e:	601a      	str	r2, [r3, #0]
 8000180:	e01d      	b.n	80001be <config_gpio_mode_bits+0x7e>

	} else if (pin <= 15) {
 8000182:	78fb      	ldrb	r3, [r7, #3]
 8000184:	2b0f      	cmp	r3, #15
 8000186:	d817      	bhi.n	80001b8 <config_gpio_mode_bits+0x78>
		// clear bit first
		GPIOx->CRH &= (uint32_t)~(1 << (4 * (pin - 7))) ;
 8000188:	687b      	ldr	r3, [r7, #4]
 800018a:	685b      	ldr	r3, [r3, #4]
 800018c:	78fa      	ldrb	r2, [r7, #3]
 800018e:	3a07      	subs	r2, #7
 8000190:	0092      	lsls	r2, r2, #2
 8000192:	2101      	movs	r1, #1
 8000194:	fa01 f202 	lsl.w	r2, r1, r2
 8000198:	43d2      	mvns	r2, r2
 800019a:	401a      	ands	r2, r3
 800019c:	687b      	ldr	r3, [r7, #4]
 800019e:	605a      	str	r2, [r3, #4]

		GPIOx->CRH |= (uint32_t)(mode_bits << (4 * (pin - 7))) ;
 80001a0:	687b      	ldr	r3, [r7, #4]
 80001a2:	685b      	ldr	r3, [r3, #4]
 80001a4:	78b9      	ldrb	r1, [r7, #2]
 80001a6:	78fa      	ldrb	r2, [r7, #3]
 80001a8:	3a07      	subs	r2, #7
 80001aa:	0092      	lsls	r2, r2, #2
 80001ac:	fa01 f202 	lsl.w	r2, r1, r2
 80001b0:	431a      	orrs	r2, r3
 80001b2:	687b      	ldr	r3, [r7, #4]
 80001b4:	605a      	str	r2, [r3, #4]
 80001b6:	e002      	b.n	80001be <config_gpio_mode_bits+0x7e>

	} else {
		return -1 ;
 80001b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80001bc:	e000      	b.n	80001c0 <config_gpio_mode_bits+0x80>
	}

	return 0 ;
 80001be:	2300      	movs	r3, #0
}
 80001c0:	4618      	mov	r0, r3
 80001c2:	370c      	adds	r7, #12
 80001c4:	46bd      	mov	sp, r7
 80001c6:	bc80      	pop	{r7}
 80001c8:	4770      	bx	lr

080001ca <config_gpio_cnf_bits>:


int config_gpio_cnf_bits(GPIO_TypeDef * GPIOx ,uint8_t pin ,uint8_t cnf_bits)
{
 80001ca:	b480      	push	{r7}
 80001cc:	b085      	sub	sp, #20
 80001ce:	af00      	add	r7, sp, #0
 80001d0:	6078      	str	r0, [r7, #4]
 80001d2:	460b      	mov	r3, r1
 80001d4:	70fb      	strb	r3, [r7, #3]
 80001d6:	4613      	mov	r3, r2
 80001d8:	70bb      	strb	r3, [r7, #2]
	uint8_t bit_shift ;

	if (pin <= 7) {
 80001da:	78fb      	ldrb	r3, [r7, #3]
 80001dc:	2b07      	cmp	r3, #7
 80001de:	d818      	bhi.n	8000212 <config_gpio_cnf_bits+0x48>
		bit_shift = (4 * pin) + 2 ;
 80001e0:	78fb      	ldrb	r3, [r7, #3]
 80001e2:	009b      	lsls	r3, r3, #2
 80001e4:	b2db      	uxtb	r3, r3
 80001e6:	3302      	adds	r3, #2
 80001e8:	73fb      	strb	r3, [r7, #15]

		// clear bit first
		GPIOx->CRL &= (uint32_t)~(1 << bit_shift) ;
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	681b      	ldr	r3, [r3, #0]
 80001ee:	7bfa      	ldrb	r2, [r7, #15]
 80001f0:	2101      	movs	r1, #1
 80001f2:	fa01 f202 	lsl.w	r2, r1, r2
 80001f6:	43d2      	mvns	r2, r2
 80001f8:	401a      	ands	r2, r3
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	601a      	str	r2, [r3, #0]

		GPIOx->CRL |= (uint32_t)(cnf_bits << bit_shift) ;
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	681b      	ldr	r3, [r3, #0]
 8000202:	78b9      	ldrb	r1, [r7, #2]
 8000204:	7bfa      	ldrb	r2, [r7, #15]
 8000206:	fa01 f202 	lsl.w	r2, r1, r2
 800020a:	431a      	orrs	r2, r3
 800020c:	687b      	ldr	r3, [r7, #4]
 800020e:	601a      	str	r2, [r3, #0]
 8000210:	e020      	b.n	8000254 <config_gpio_cnf_bits+0x8a>

	} else if (pin <= 15) {
 8000212:	78fb      	ldrb	r3, [r7, #3]
 8000214:	2b0f      	cmp	r3, #15
 8000216:	d81a      	bhi.n	800024e <config_gpio_cnf_bits+0x84>
		bit_shift = (4 * (pin - 7)) + 2 ;
 8000218:	78fb      	ldrb	r3, [r7, #3]
 800021a:	3b07      	subs	r3, #7
 800021c:	b2db      	uxtb	r3, r3
 800021e:	009b      	lsls	r3, r3, #2
 8000220:	b2db      	uxtb	r3, r3
 8000222:	3302      	adds	r3, #2
 8000224:	73fb      	strb	r3, [r7, #15]

		// clear bit first
		GPIOx->CRH &= (uint32_t)~(1 << bit_shift) ;
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	685b      	ldr	r3, [r3, #4]
 800022a:	7bfa      	ldrb	r2, [r7, #15]
 800022c:	2101      	movs	r1, #1
 800022e:	fa01 f202 	lsl.w	r2, r1, r2
 8000232:	43d2      	mvns	r2, r2
 8000234:	401a      	ands	r2, r3
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	605a      	str	r2, [r3, #4]

		GPIOx->CRH |= (uint32_t)(cnf_bits << bit_shift) ;
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	685b      	ldr	r3, [r3, #4]
 800023e:	78b9      	ldrb	r1, [r7, #2]
 8000240:	7bfa      	ldrb	r2, [r7, #15]
 8000242:	fa01 f202 	lsl.w	r2, r1, r2
 8000246:	431a      	orrs	r2, r3
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	605a      	str	r2, [r3, #4]
 800024c:	e002      	b.n	8000254 <config_gpio_cnf_bits+0x8a>

	} else {
		return -1 ;
 800024e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000252:	e000      	b.n	8000256 <config_gpio_cnf_bits+0x8c>
	}

	return 0 ;
 8000254:	2300      	movs	r3, #0
}
 8000256:	4618      	mov	r0, r3
 8000258:	3714      	adds	r7, #20
 800025a:	46bd      	mov	sp, r7
 800025c:	bc80      	pop	{r7}
 800025e:	4770      	bx	lr

08000260 <gpio_pin_mode>:



void gpio_pin_mode(GPIO_TypeDef * GPIOx ,uint8_t pin ,uint8_t pin_mode)
{
 8000260:	b580      	push	{r7, lr}
 8000262:	b082      	sub	sp, #8
 8000264:	af00      	add	r7, sp, #0
 8000266:	6078      	str	r0, [r7, #4]
 8000268:	460b      	mov	r3, r1
 800026a:	70fb      	strb	r3, [r7, #3]
 800026c:	4613      	mov	r3, r2
 800026e:	70bb      	strb	r3, [r7, #2]
	if (pin_mode == OUTPUT) {
 8000270:	78bb      	ldrb	r3, [r7, #2]
 8000272:	2b00      	cmp	r3, #0
 8000274:	d10c      	bne.n	8000290 <gpio_pin_mode+0x30>
		config_gpio_mode_bits(GPIOx ,pin ,MODE_OUTPUT_50M) ;
 8000276:	78fb      	ldrb	r3, [r7, #3]
 8000278:	2203      	movs	r2, #3
 800027a:	4619      	mov	r1, r3
 800027c:	6878      	ldr	r0, [r7, #4]
 800027e:	f7ff ff5f 	bl	8000140 <config_gpio_mode_bits>
		config_gpio_cnf_bits(GPIOx ,pin ,GPO_PUSH_PULL) ;
 8000282:	78fb      	ldrb	r3, [r7, #3]
 8000284:	2200      	movs	r2, #0
 8000286:	4619      	mov	r1, r3
 8000288:	6878      	ldr	r0, [r7, #4]
 800028a:	f7ff ff9e 	bl	80001ca <config_gpio_cnf_bits>

	} else {
		config_gpio_mode_bits(GPIOx ,pin ,MODE_INPUT) ;
	}
}
 800028e:	e005      	b.n	800029c <gpio_pin_mode+0x3c>
		config_gpio_mode_bits(GPIOx ,pin ,MODE_INPUT) ;
 8000290:	78fb      	ldrb	r3, [r7, #3]
 8000292:	2200      	movs	r2, #0
 8000294:	4619      	mov	r1, r3
 8000296:	6878      	ldr	r0, [r7, #4]
 8000298:	f7ff ff52 	bl	8000140 <config_gpio_mode_bits>
}
 800029c:	bf00      	nop
 800029e:	3708      	adds	r7, #8
 80002a0:	46bd      	mov	sp, r7
 80002a2:	bd80      	pop	{r7, pc}

080002a4 <gpio_pin_toggle>:



void gpio_pin_toggle(GPIO_TypeDef * GPIOx ,uint8_t pin)
{
 80002a4:	b480      	push	{r7}
 80002a6:	b083      	sub	sp, #12
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	6078      	str	r0, [r7, #4]
 80002ac:	460b      	mov	r3, r1
 80002ae:	70fb      	strb	r3, [r7, #3]
	GPIOx->ODR ^= (1 << pin)	; /* toggle PC13 */
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	68db      	ldr	r3, [r3, #12]
 80002b4:	78fa      	ldrb	r2, [r7, #3]
 80002b6:	2101      	movs	r1, #1
 80002b8:	fa01 f202 	lsl.w	r2, r1, r2
 80002bc:	405a      	eors	r2, r3
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	60da      	str	r2, [r3, #12]
}
 80002c2:	bf00      	nop
 80002c4:	370c      	adds	r7, #12
 80002c6:	46bd      	mov	sp, r7
 80002c8:	bc80      	pop	{r7}
 80002ca:	4770      	bx	lr

080002cc <gpio_pin_write>:

int gpio_pin_write(GPIO_TypeDef *GPIOx ,uint8_t pin ,uint32_t write)
{
 80002cc:	b480      	push	{r7}
 80002ce:	b085      	sub	sp, #20
 80002d0:	af00      	add	r7, sp, #0
 80002d2:	60f8      	str	r0, [r7, #12]
 80002d4:	460b      	mov	r3, r1
 80002d6:	607a      	str	r2, [r7, #4]
 80002d8:	72fb      	strb	r3, [r7, #11]
	// High
	if (write == HIGH)
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	2b01      	cmp	r3, #1
 80002de:	d109      	bne.n	80002f4 <gpio_pin_write+0x28>
		GPIOx->ODR |= (1 << pin) ;
 80002e0:	68fb      	ldr	r3, [r7, #12]
 80002e2:	68db      	ldr	r3, [r3, #12]
 80002e4:	7afa      	ldrb	r2, [r7, #11]
 80002e6:	2101      	movs	r1, #1
 80002e8:	fa01 f202 	lsl.w	r2, r1, r2
 80002ec:	431a      	orrs	r2, r3
 80002ee:	68fb      	ldr	r3, [r7, #12]
 80002f0:	60da      	str	r2, [r3, #12]
 80002f2:	e010      	b.n	8000316 <gpio_pin_write+0x4a>
	
	// low
	else if(write == LOW)
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d10a      	bne.n	8000310 <gpio_pin_write+0x44>
		GPIOx->ODR &= ~(1 << pin) ;
 80002fa:	68fb      	ldr	r3, [r7, #12]
 80002fc:	68db      	ldr	r3, [r3, #12]
 80002fe:	7afa      	ldrb	r2, [r7, #11]
 8000300:	2101      	movs	r1, #1
 8000302:	fa01 f202 	lsl.w	r2, r1, r2
 8000306:	43d2      	mvns	r2, r2
 8000308:	401a      	ands	r2, r3
 800030a:	68fb      	ldr	r3, [r7, #12]
 800030c:	60da      	str	r2, [r3, #12]
 800030e:	e002      	b.n	8000316 <gpio_pin_write+0x4a>
	
	else
		return -1 ;
 8000310:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000314:	e000      	b.n	8000318 <gpio_pin_write+0x4c>
	
	return 0 ;
 8000316:	2300      	movs	r3, #0
}
 8000318:	4618      	mov	r0, r3
 800031a:	3714      	adds	r7, #20
 800031c:	46bd      	mov	sp, r7
 800031e:	bc80      	pop	{r7}
 8000320:	4770      	bx	lr
 8000322:	bf00      	nop

08000324 <main>:
#include "user_threads.h"
#include "switch.h"


int main(void)
{	
 8000324:	b580      	push	{r7, lr}
 8000326:	b082      	sub	sp, #8
 8000328:	af00      	add	r7, sp, #0
  	usart_init(CONSOLE_PTR) ;
 800032a:	4818      	ldr	r0, [pc, #96]	; (800038c <main+0x68>)
 800032c:	f000 fbc8 	bl	8000ac0 <usart_init>
	
	systick_int_init(100000) ;	//100ms
 8000330:	4817      	ldr	r0, [pc, #92]	; (8000390 <main+0x6c>)
 8000332:	f000 fa27 	bl	8000784 <systick_int_init>


	for (int i = 0 ; i < 4; i++)
 8000336:	2300      	movs	r3, #0
 8000338:	607b      	str	r3, [r7, #4]
 800033a:	e011      	b.n	8000360 <main+0x3c>
		thread_create(&thread[i] ,user_threads[i] ,thread_stack[i]) ;
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	015b      	lsls	r3, r3, #5
 8000340:	4a14      	ldr	r2, [pc, #80]	; (8000394 <main+0x70>)
 8000342:	1898      	adds	r0, r3, r2
 8000344:	4a14      	ldr	r2, [pc, #80]	; (8000398 <main+0x74>)
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	025b      	lsls	r3, r3, #9
 8000350:	4a12      	ldr	r2, [pc, #72]	; (800039c <main+0x78>)
 8000352:	4413      	add	r3, r2
 8000354:	461a      	mov	r2, r3
 8000356:	f000 fa8d 	bl	8000874 <thread_create>
	for (int i = 0 ; i < 4; i++)
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	3301      	adds	r3, #1
 800035e:	607b      	str	r3, [r7, #4]
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	2b03      	cmp	r3, #3
 8000364:	ddea      	ble.n	800033c <main+0x18>


	first_thread_init() ;	
 8000366:	f000 fae5 	bl	8000934 <first_thread_init>
	systick_enable() ;
 800036a:	f000 f989 	bl	8000680 <systick_enable>

	run_thread((uint32_t *)curr_thread->context) ;
 800036e:	4b0c      	ldr	r3, [pc, #48]	; (80003a0 <main+0x7c>)
 8000370:	681b      	ldr	r3, [r3, #0]
 8000372:	695b      	ldr	r3, [r3, #20]
 8000374:	4618      	mov	r0, r3
 8000376:	f000 f821 	bl	80003bc <run_thread>

	// Never reach Here
	usart_send_str(CONSOLE_PTR, "Never Print This Line.\n") ;
 800037a:	490a      	ldr	r1, [pc, #40]	; (80003a4 <main+0x80>)
 800037c:	4803      	ldr	r0, [pc, #12]	; (800038c <main+0x68>)
 800037e:	f000 fb05 	bl	800098c <usart_send_str>

	return 0 ;
 8000382:	2300      	movs	r3, #0
}
 8000384:	4618      	mov	r0, r3
 8000386:	3708      	adds	r7, #8
 8000388:	46bd      	mov	sp, r7
 800038a:	bd80      	pop	{r7, pc}
 800038c:	40004400 	.word	0x40004400
 8000390:	000186a0 	.word	0x000186a0
 8000394:	20000838 	.word	0x20000838
 8000398:	20000024 	.word	0x20000024
 800039c:	20000038 	.word	0x20000038
 80003a0:	200008bc 	.word	0x200008bc
 80003a4:	08000be0 	.word	0x08000be0
 80003a8:	08000c42 	.word	0x08000c42
 80003ac:	20000000 	.word	0x20000000
 80003b0:	20000034 	.word	0x20000034
 80003b4:	20000034 	.word	0x20000034
 80003b8:	200008c0 	.word	0x200008c0

080003bc <run_thread>:
 80003bc:	f380 8809 	msr	PSP, r0
 80003c0:	f04f 0003 	mov.w	r0, #3
 80003c4:	f380 8814 	msr	CONTROL, r0
 80003c8:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80003cc:	f8dd e018 	ldr.w	lr, [sp, #24]
 80003d0:	4770      	bx	lr
 80003d2:	bf00      	nop

080003d4 <switch_user_context>:
 80003d4:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80003d8:	f380 8809 	msr	PSP, r0
 80003dc:	f06f 0e02 	mvn.w	lr, #2
 80003e0:	4770      	bx	lr
 80003e2:	bf00      	nop

080003e4 <SysTick_Handler>:
 80003e4:	e000      	b.n	80003e8 <save_user_context>
 80003e6:	bf00      	nop

080003e8 <save_user_context>:
 80003e8:	f3ef 8009 	mrs	r0, PSP
 80003ec:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80003f0:	f000 f800 	bl	80003f4 <context_switch>

080003f4 <context_switch>:
#include "switch.h"



void context_switch(struct thread_context *old_context)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b082      	sub	sp, #8
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	6078      	str	r0, [r7, #4]
	curr_thread->context = old_context ;
 80003fc:	4b09      	ldr	r3, [pc, #36]	; (8000424 <context_switch+0x30>)
 80003fe:	681b      	ldr	r3, [r3, #0]
 8000400:	687a      	ldr	r2, [r7, #4]
 8000402:	615a      	str	r2, [r3, #20]

	systick_disable() ;
 8000404:	f000 f94a 	bl	800069c <systick_disable>

	scheduler() ;
 8000408:	f000 fa74 	bl	80008f4 <scheduler>
	
	systick_enable() ;
 800040c:	f000 f938 	bl	8000680 <systick_enable>

	switch_user_context(curr_thread->context) ;
 8000410:	4b04      	ldr	r3, [pc, #16]	; (8000424 <context_switch+0x30>)
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	695b      	ldr	r3, [r3, #20]
 8000416:	4618      	mov	r0, r3
 8000418:	f7ff ffdc 	bl	80003d4 <switch_user_context>

}
 800041c:	bf00      	nop
 800041e:	3708      	adds	r7, #8
 8000420:	46bd      	mov	sp, r7
 8000422:	bd80      	pop	{r7, pc}
 8000424:	200008bc 	.word	0x200008bc

08000428 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800042c:	4b15      	ldr	r3, [pc, #84]	; (8000484 <SystemInit+0x5c>)
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	4a14      	ldr	r2, [pc, #80]	; (8000484 <SystemInit+0x5c>)
 8000432:	f043 0301 	orr.w	r3, r3, #1
 8000436:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8000438:	4b12      	ldr	r3, [pc, #72]	; (8000484 <SystemInit+0x5c>)
 800043a:	685a      	ldr	r2, [r3, #4]
 800043c:	4911      	ldr	r1, [pc, #68]	; (8000484 <SystemInit+0x5c>)
 800043e:	4b12      	ldr	r3, [pc, #72]	; (8000488 <SystemInit+0x60>)
 8000440:	4013      	ands	r3, r2
 8000442:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000444:	4b0f      	ldr	r3, [pc, #60]	; (8000484 <SystemInit+0x5c>)
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	4a0e      	ldr	r2, [pc, #56]	; (8000484 <SystemInit+0x5c>)
 800044a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800044e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000452:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000454:	4b0b      	ldr	r3, [pc, #44]	; (8000484 <SystemInit+0x5c>)
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	4a0a      	ldr	r2, [pc, #40]	; (8000484 <SystemInit+0x5c>)
 800045a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800045e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8000460:	4b08      	ldr	r3, [pc, #32]	; (8000484 <SystemInit+0x5c>)
 8000462:	685b      	ldr	r3, [r3, #4]
 8000464:	4a07      	ldr	r2, [pc, #28]	; (8000484 <SystemInit+0x5c>)
 8000466:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800046a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 800046c:	4b05      	ldr	r3, [pc, #20]	; (8000484 <SystemInit+0x5c>)
 800046e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000472:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 8000474:	f000 f87e 	bl	8000574 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000478:	4b04      	ldr	r3, [pc, #16]	; (800048c <SystemInit+0x64>)
 800047a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800047e:	609a      	str	r2, [r3, #8]
#endif 
}
 8000480:	bf00      	nop
 8000482:	bd80      	pop	{r7, pc}
 8000484:	40021000 	.word	0x40021000
 8000488:	f8ff0000 	.word	0xf8ff0000
 800048c:	e000ed00 	.word	0xe000ed00

08000490 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
 8000490:	b480      	push	{r7}
 8000492:	b085      	sub	sp, #20
 8000494:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllmull = 0, pllsource = 0;
 8000496:	2300      	movs	r3, #0
 8000498:	60fb      	str	r3, [r7, #12]
 800049a:	2300      	movs	r3, #0
 800049c:	60bb      	str	r3, [r7, #8]
 800049e:	2300      	movs	r3, #0
 80004a0:	607b      	str	r3, [r7, #4]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || (defined STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif /* STM32F10X_LD_VL or STM32F10X_MD_VL or STM32F10X_HD_VL */
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80004a2:	4b2f      	ldr	r3, [pc, #188]	; (8000560 <SystemCoreClockUpdate+0xd0>)
 80004a4:	685b      	ldr	r3, [r3, #4]
 80004a6:	f003 030c 	and.w	r3, r3, #12
 80004aa:	60fb      	str	r3, [r7, #12]
  
  switch (tmp)
 80004ac:	68fb      	ldr	r3, [r7, #12]
 80004ae:	2b08      	cmp	r3, #8
 80004b0:	d011      	beq.n	80004d6 <SystemCoreClockUpdate+0x46>
 80004b2:	68fb      	ldr	r3, [r7, #12]
 80004b4:	2b08      	cmp	r3, #8
 80004b6:	d83a      	bhi.n	800052e <SystemCoreClockUpdate+0x9e>
 80004b8:	68fb      	ldr	r3, [r7, #12]
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d003      	beq.n	80004c6 <SystemCoreClockUpdate+0x36>
 80004be:	68fb      	ldr	r3, [r7, #12]
 80004c0:	2b04      	cmp	r3, #4
 80004c2:	d004      	beq.n	80004ce <SystemCoreClockUpdate+0x3e>
 80004c4:	e033      	b.n	800052e <SystemCoreClockUpdate+0x9e>
  {
    case 0x00:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 80004c6:	4b27      	ldr	r3, [pc, #156]	; (8000564 <SystemCoreClockUpdate+0xd4>)
 80004c8:	4a27      	ldr	r2, [pc, #156]	; (8000568 <SystemCoreClockUpdate+0xd8>)
 80004ca:	601a      	str	r2, [r3, #0]
      break;
 80004cc:	e033      	b.n	8000536 <SystemCoreClockUpdate+0xa6>
    case 0x04:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
 80004ce:	4b25      	ldr	r3, [pc, #148]	; (8000564 <SystemCoreClockUpdate+0xd4>)
 80004d0:	4a25      	ldr	r2, [pc, #148]	; (8000568 <SystemCoreClockUpdate+0xd8>)
 80004d2:	601a      	str	r2, [r3, #0]
      break;
 80004d4:	e02f      	b.n	8000536 <SystemCoreClockUpdate+0xa6>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 80004d6:	4b22      	ldr	r3, [pc, #136]	; (8000560 <SystemCoreClockUpdate+0xd0>)
 80004d8:	685b      	ldr	r3, [r3, #4]
 80004da:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80004de:	60bb      	str	r3, [r7, #8]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 80004e0:	4b1f      	ldr	r3, [pc, #124]	; (8000560 <SystemCoreClockUpdate+0xd0>)
 80004e2:	685b      	ldr	r3, [r3, #4]
 80004e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80004e8:	607b      	str	r3, [r7, #4]
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
 80004ea:	68bb      	ldr	r3, [r7, #8]
 80004ec:	0c9b      	lsrs	r3, r3, #18
 80004ee:	3302      	adds	r3, #2
 80004f0:	60bb      	str	r3, [r7, #8]
      
      if (pllsource == 0x00)
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d106      	bne.n	8000506 <SystemCoreClockUpdate+0x76>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
 80004f8:	68bb      	ldr	r3, [r7, #8]
 80004fa:	4a1c      	ldr	r2, [pc, #112]	; (800056c <SystemCoreClockUpdate+0xdc>)
 80004fc:	fb02 f303 	mul.w	r3, r2, r3
 8000500:	4a18      	ldr	r2, [pc, #96]	; (8000564 <SystemCoreClockUpdate+0xd4>)
 8000502:	6013      	str	r3, [r2, #0]
          pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8 ) + 2; 
          SystemCoreClock = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
 8000504:	e017      	b.n	8000536 <SystemCoreClockUpdate+0xa6>
        if ((RCC->CFGR & RCC_CFGR_PLLXTPRE) != (uint32_t)RESET)
 8000506:	4b16      	ldr	r3, [pc, #88]	; (8000560 <SystemCoreClockUpdate+0xd0>)
 8000508:	685b      	ldr	r3, [r3, #4]
 800050a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800050e:	2b00      	cmp	r3, #0
 8000510:	d006      	beq.n	8000520 <SystemCoreClockUpdate+0x90>
          SystemCoreClock = (HSE_VALUE >> 1) * pllmull;
 8000512:	68bb      	ldr	r3, [r7, #8]
 8000514:	4a15      	ldr	r2, [pc, #84]	; (800056c <SystemCoreClockUpdate+0xdc>)
 8000516:	fb02 f303 	mul.w	r3, r2, r3
 800051a:	4a12      	ldr	r2, [pc, #72]	; (8000564 <SystemCoreClockUpdate+0xd4>)
 800051c:	6013      	str	r3, [r2, #0]
      break;
 800051e:	e00a      	b.n	8000536 <SystemCoreClockUpdate+0xa6>
          SystemCoreClock = HSE_VALUE * pllmull;
 8000520:	68bb      	ldr	r3, [r7, #8]
 8000522:	4a11      	ldr	r2, [pc, #68]	; (8000568 <SystemCoreClockUpdate+0xd8>)
 8000524:	fb02 f303 	mul.w	r3, r2, r3
 8000528:	4a0e      	ldr	r2, [pc, #56]	; (8000564 <SystemCoreClockUpdate+0xd4>)
 800052a:	6013      	str	r3, [r2, #0]
      break;
 800052c:	e003      	b.n	8000536 <SystemCoreClockUpdate+0xa6>

    default:
      SystemCoreClock = HSI_VALUE;
 800052e:	4b0d      	ldr	r3, [pc, #52]	; (8000564 <SystemCoreClockUpdate+0xd4>)
 8000530:	4a0d      	ldr	r2, [pc, #52]	; (8000568 <SystemCoreClockUpdate+0xd8>)
 8000532:	601a      	str	r2, [r3, #0]
      break;
 8000534:	bf00      	nop
  }
  
  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8000536:	4b0a      	ldr	r3, [pc, #40]	; (8000560 <SystemCoreClockUpdate+0xd0>)
 8000538:	685b      	ldr	r3, [r3, #4]
 800053a:	091b      	lsrs	r3, r3, #4
 800053c:	f003 030f 	and.w	r3, r3, #15
 8000540:	4a0b      	ldr	r2, [pc, #44]	; (8000570 <SystemCoreClockUpdate+0xe0>)
 8000542:	5cd3      	ldrb	r3, [r2, r3]
 8000544:	b2db      	uxtb	r3, r3
 8000546:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;  
 8000548:	4b06      	ldr	r3, [pc, #24]	; (8000564 <SystemCoreClockUpdate+0xd4>)
 800054a:	681a      	ldr	r2, [r3, #0]
 800054c:	68fb      	ldr	r3, [r7, #12]
 800054e:	fa22 f303 	lsr.w	r3, r2, r3
 8000552:	4a04      	ldr	r2, [pc, #16]	; (8000564 <SystemCoreClockUpdate+0xd4>)
 8000554:	6013      	str	r3, [r2, #0]
}
 8000556:	bf00      	nop
 8000558:	3714      	adds	r7, #20
 800055a:	46bd      	mov	sp, r7
 800055c:	bc80      	pop	{r7}
 800055e:	4770      	bx	lr
 8000560:	40021000 	.word	0x40021000
 8000564:	20000000 	.word	0x20000000
 8000568:	007a1200 	.word	0x007a1200
 800056c:	003d0900 	.word	0x003d0900
 8000570:	20000004 	.word	0x20000004

08000574 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 8000578:	f000 f802 	bl	8000580 <SetSysClockTo72>
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 800057c:	bf00      	nop
 800057e:	bd80      	pop	{r7, pc}

08000580 <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 8000580:	b480      	push	{r7}
 8000582:	b083      	sub	sp, #12
 8000584:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000586:	2300      	movs	r3, #0
 8000588:	607b      	str	r3, [r7, #4]
 800058a:	2300      	movs	r3, #0
 800058c:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 800058e:	4b3a      	ldr	r3, [pc, #232]	; (8000678 <SetSysClockTo72+0xf8>)
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	4a39      	ldr	r2, [pc, #228]	; (8000678 <SetSysClockTo72+0xf8>)
 8000594:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000598:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800059a:	4b37      	ldr	r3, [pc, #220]	; (8000678 <SetSysClockTo72+0xf8>)
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005a2:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	3301      	adds	r3, #1
 80005a8:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80005aa:	683b      	ldr	r3, [r7, #0]
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d103      	bne.n	80005b8 <SetSysClockTo72+0x38>
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80005b6:	d1f0      	bne.n	800059a <SetSysClockTo72+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80005b8:	4b2f      	ldr	r3, [pc, #188]	; (8000678 <SetSysClockTo72+0xf8>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d002      	beq.n	80005ca <SetSysClockTo72+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 80005c4:	2301      	movs	r3, #1
 80005c6:	603b      	str	r3, [r7, #0]
 80005c8:	e001      	b.n	80005ce <SetSysClockTo72+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80005ca:	2300      	movs	r3, #0
 80005cc:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 80005ce:	683b      	ldr	r3, [r7, #0]
 80005d0:	2b01      	cmp	r3, #1
 80005d2:	d14b      	bne.n	800066c <SetSysClockTo72+0xec>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 80005d4:	4b29      	ldr	r3, [pc, #164]	; (800067c <SetSysClockTo72+0xfc>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	4a28      	ldr	r2, [pc, #160]	; (800067c <SetSysClockTo72+0xfc>)
 80005da:	f043 0310 	orr.w	r3, r3, #16
 80005de:	6013      	str	r3, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 80005e0:	4b26      	ldr	r3, [pc, #152]	; (800067c <SetSysClockTo72+0xfc>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	4a25      	ldr	r2, [pc, #148]	; (800067c <SetSysClockTo72+0xfc>)
 80005e6:	f023 0303 	bic.w	r3, r3, #3
 80005ea:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 80005ec:	4b23      	ldr	r3, [pc, #140]	; (800067c <SetSysClockTo72+0xfc>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	4a22      	ldr	r2, [pc, #136]	; (800067c <SetSysClockTo72+0xfc>)
 80005f2:	f043 0302 	orr.w	r3, r3, #2
 80005f6:	6013      	str	r3, [r2, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 80005f8:	4b1f      	ldr	r3, [pc, #124]	; (8000678 <SetSysClockTo72+0xf8>)
 80005fa:	4a1f      	ldr	r2, [pc, #124]	; (8000678 <SetSysClockTo72+0xf8>)
 80005fc:	685b      	ldr	r3, [r3, #4]
 80005fe:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8000600:	4b1d      	ldr	r3, [pc, #116]	; (8000678 <SetSysClockTo72+0xf8>)
 8000602:	4a1d      	ldr	r2, [pc, #116]	; (8000678 <SetSysClockTo72+0xf8>)
 8000604:	685b      	ldr	r3, [r3, #4]
 8000606:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 8000608:	4b1b      	ldr	r3, [pc, #108]	; (8000678 <SetSysClockTo72+0xf8>)
 800060a:	685b      	ldr	r3, [r3, #4]
 800060c:	4a1a      	ldr	r2, [pc, #104]	; (8000678 <SetSysClockTo72+0xf8>)
 800060e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000612:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 8000614:	4b18      	ldr	r3, [pc, #96]	; (8000678 <SetSysClockTo72+0xf8>)
 8000616:	685b      	ldr	r3, [r3, #4]
 8000618:	4a17      	ldr	r2, [pc, #92]	; (8000678 <SetSysClockTo72+0xf8>)
 800061a:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 800061e:	6053      	str	r3, [r2, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 8000620:	4b15      	ldr	r3, [pc, #84]	; (8000678 <SetSysClockTo72+0xf8>)
 8000622:	685b      	ldr	r3, [r3, #4]
 8000624:	4a14      	ldr	r2, [pc, #80]	; (8000678 <SetSysClockTo72+0xf8>)
 8000626:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 800062a:	6053      	str	r3, [r2, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 800062c:	4b12      	ldr	r3, [pc, #72]	; (8000678 <SetSysClockTo72+0xf8>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	4a11      	ldr	r2, [pc, #68]	; (8000678 <SetSysClockTo72+0xf8>)
 8000632:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000636:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000638:	bf00      	nop
 800063a:	4b0f      	ldr	r3, [pc, #60]	; (8000678 <SetSysClockTo72+0xf8>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000642:	2b00      	cmp	r3, #0
 8000644:	d0f9      	beq.n	800063a <SetSysClockTo72+0xba>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000646:	4b0c      	ldr	r3, [pc, #48]	; (8000678 <SetSysClockTo72+0xf8>)
 8000648:	685b      	ldr	r3, [r3, #4]
 800064a:	4a0b      	ldr	r2, [pc, #44]	; (8000678 <SetSysClockTo72+0xf8>)
 800064c:	f023 0303 	bic.w	r3, r3, #3
 8000650:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 8000652:	4b09      	ldr	r3, [pc, #36]	; (8000678 <SetSysClockTo72+0xf8>)
 8000654:	685b      	ldr	r3, [r3, #4]
 8000656:	4a08      	ldr	r2, [pc, #32]	; (8000678 <SetSysClockTo72+0xf8>)
 8000658:	f043 0302 	orr.w	r3, r3, #2
 800065c:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 800065e:	bf00      	nop
 8000660:	4b05      	ldr	r3, [pc, #20]	; (8000678 <SetSysClockTo72+0xf8>)
 8000662:	685b      	ldr	r3, [r3, #4]
 8000664:	f003 030c 	and.w	r3, r3, #12
 8000668:	2b08      	cmp	r3, #8
 800066a:	d1f9      	bne.n	8000660 <SetSysClockTo72+0xe0>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
 800066c:	bf00      	nop
 800066e:	370c      	adds	r7, #12
 8000670:	46bd      	mov	sp, r7
 8000672:	bc80      	pop	{r7}
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop
 8000678:	40021000 	.word	0x40021000
 800067c:	40022000 	.word	0x40022000

08000680 <systick_enable>:




void systick_enable(void)
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
	SET_SINGLE_BIT(SysTick->CTRL ,0) ;
 8000684:	4b04      	ldr	r3, [pc, #16]	; (8000698 <systick_enable+0x18>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	4a03      	ldr	r2, [pc, #12]	; (8000698 <systick_enable+0x18>)
 800068a:	f043 0301 	orr.w	r3, r3, #1
 800068e:	6013      	str	r3, [r2, #0]
}
 8000690:	bf00      	nop
 8000692:	46bd      	mov	sp, r7
 8000694:	bc80      	pop	{r7}
 8000696:	4770      	bx	lr
 8000698:	e000e010 	.word	0xe000e010

0800069c <systick_disable>:



void systick_disable(void)
{
 800069c:	b480      	push	{r7}
 800069e:	af00      	add	r7, sp, #0
	CLEAR_SINGLE_BIT(SysTick->CTRL ,0) ;
 80006a0:	4b04      	ldr	r3, [pc, #16]	; (80006b4 <systick_disable+0x18>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	4a03      	ldr	r2, [pc, #12]	; (80006b4 <systick_disable+0x18>)
 80006a6:	f023 0301 	bic.w	r3, r3, #1
 80006aa:	6013      	str	r3, [r2, #0]
}
 80006ac:	bf00      	nop
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bc80      	pop	{r7}
 80006b2:	4770      	bx	lr
 80006b4:	e000e010 	.word	0xe000e010

080006b8 <systick_choose_clksrc>:


void systick_choose_clksrc(uint32_t clk_src)
{
 80006b8:	b480      	push	{r7}
 80006ba:	b083      	sub	sp, #12
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
	if (clk_src == SYSTICK_AHBCLK)
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	2b01      	cmp	r3, #1
 80006c4:	d106      	bne.n	80006d4 <systick_choose_clksrc+0x1c>
		SET_SINGLE_BIT(SysTick->CTRL ,2) ;
 80006c6:	4b09      	ldr	r3, [pc, #36]	; (80006ec <systick_choose_clksrc+0x34>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	4a08      	ldr	r2, [pc, #32]	; (80006ec <systick_choose_clksrc+0x34>)
 80006cc:	f043 0304 	orr.w	r3, r3, #4
 80006d0:	6013      	str	r3, [r2, #0]
	
	else 
		CLEAR_SINGLE_BIT(SysTick->CTRL ,2) ;
}
 80006d2:	e005      	b.n	80006e0 <systick_choose_clksrc+0x28>
		CLEAR_SINGLE_BIT(SysTick->CTRL ,2) ;
 80006d4:	4b05      	ldr	r3, [pc, #20]	; (80006ec <systick_choose_clksrc+0x34>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	4a04      	ldr	r2, [pc, #16]	; (80006ec <systick_choose_clksrc+0x34>)
 80006da:	f023 0304 	bic.w	r3, r3, #4
 80006de:	6013      	str	r3, [r2, #0]
}
 80006e0:	bf00      	nop
 80006e2:	370c      	adds	r7, #12
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bc80      	pop	{r7}
 80006e8:	4770      	bx	lr
 80006ea:	bf00      	nop
 80006ec:	e000e010 	.word	0xe000e010

080006f0 <systick_count_zero>:
/**
 * True : Has counted to zero
 * False :Not yet
 */ 
int systick_count_zero(void)
{
 80006f0:	b480      	push	{r7}
 80006f2:	af00      	add	r7, sp, #0
	return SysTick->CTRL & SysTick_CTRL_COUNTFLAG ;
 80006f4:	4b03      	ldr	r3, [pc, #12]	; (8000704 <systick_count_zero+0x14>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
 80006fc:	4618      	mov	r0, r3
 80006fe:	46bd      	mov	sp, r7
 8000700:	bc80      	pop	{r7}
 8000702:	4770      	bx	lr
 8000704:	e000e010 	.word	0xe000e010

08000708 <delay>:
 * (N + 1) = delay × clk = 0.001 sec × 72 MHz = 72,000
 * ==> N = 72,000 – 1 = 71999
 * 
 */ 
void delay(uint32_t us) 
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b084      	sub	sp, #16
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
	uint32_t load_val = (us * CLK_MHZ) - 1 ;
 8000710:	687a      	ldr	r2, [r7, #4]
 8000712:	4613      	mov	r3, r2
 8000714:	00db      	lsls	r3, r3, #3
 8000716:	4413      	add	r3, r2
 8000718:	00db      	lsls	r3, r3, #3
 800071a:	3b01      	subs	r3, #1
 800071c:	60fb      	str	r3, [r7, #12]

	SysTick->LOAD = load_val ;
 800071e:	4a0a      	ldr	r2, [pc, #40]	; (8000748 <delay+0x40>)
 8000720:	68fb      	ldr	r3, [r7, #12]
 8000722:	6053      	str	r3, [r2, #4]
	systick_choose_clksrc(SYSTICK_AHBCLK) ;
 8000724:	2001      	movs	r0, #1
 8000726:	f7ff ffc7 	bl	80006b8 <systick_choose_clksrc>
	systick_enable() ;
 800072a:	f7ff ffa9 	bl	8000680 <systick_enable>

	while(systick_count_zero() == FALSE) ;
 800072e:	bf00      	nop
 8000730:	f7ff ffde 	bl	80006f0 <systick_count_zero>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d0fa      	beq.n	8000730 <delay+0x28>

	systick_disable() ;
 800073a:	f7ff ffaf 	bl	800069c <systick_disable>
}
 800073e:	bf00      	nop
 8000740:	3710      	adds	r7, #16
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	e000e010 	.word	0xe000e010

0800074c <systick_int_enable>:

void systick_int_enable(void)
{
 800074c:	b480      	push	{r7}
 800074e:	af00      	add	r7, sp, #0
	SET_SINGLE_BIT(SysTick->CTRL ,1) ;
 8000750:	4b04      	ldr	r3, [pc, #16]	; (8000764 <systick_int_enable+0x18>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	4a03      	ldr	r2, [pc, #12]	; (8000764 <systick_int_enable+0x18>)
 8000756:	f043 0302 	orr.w	r3, r3, #2
 800075a:	6013      	str	r3, [r2, #0]
}
 800075c:	bf00      	nop
 800075e:	46bd      	mov	sp, r7
 8000760:	bc80      	pop	{r7}
 8000762:	4770      	bx	lr
 8000764:	e000e010 	.word	0xe000e010

08000768 <systick_int_disable>:


void systick_int_disable(void)
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0
	CLEAR_SINGLE_BIT(SysTick->CTRL ,1) ;
 800076c:	4b04      	ldr	r3, [pc, #16]	; (8000780 <systick_int_disable+0x18>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	4a03      	ldr	r2, [pc, #12]	; (8000780 <systick_int_disable+0x18>)
 8000772:	f023 0302 	bic.w	r3, r3, #2
 8000776:	6013      	str	r3, [r2, #0]
}
 8000778:	bf00      	nop
 800077a:	46bd      	mov	sp, r7
 800077c:	bc80      	pop	{r7}
 800077e:	4770      	bx	lr
 8000780:	e000e010 	.word	0xe000e010

08000784 <systick_int_init>:


void systick_int_init(uint32_t slice_us)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b084      	sub	sp, #16
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
	uint32_t load_val = (slice_us * CLK_MHZ) - 1 ;
 800078c:	687a      	ldr	r2, [r7, #4]
 800078e:	4613      	mov	r3, r2
 8000790:	00db      	lsls	r3, r3, #3
 8000792:	4413      	add	r3, r2
 8000794:	00db      	lsls	r3, r3, #3
 8000796:	3b01      	subs	r3, #1
 8000798:	60fb      	str	r3, [r7, #12]

	SysTick->LOAD = load_val ;
 800079a:	4a07      	ldr	r2, [pc, #28]	; (80007b8 <systick_int_init+0x34>)
 800079c:	68fb      	ldr	r3, [r7, #12]
 800079e:	6053      	str	r3, [r2, #4]

	systick_choose_clksrc(SYSTICK_AHBCLK) ;
 80007a0:	2001      	movs	r0, #1
 80007a2:	f7ff ff89 	bl	80006b8 <systick_choose_clksrc>
	systick_enable() ;
 80007a6:	f7ff ff6b 	bl	8000680 <systick_enable>
	systick_int_enable() ;
 80007aa:	f7ff ffcf 	bl	800074c <systick_int_enable>
}
 80007ae:	bf00      	nop
 80007b0:	3710      	adds	r7, #16
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	e000e010 	.word	0xe000e010

080007bc <ready_list_add_tail>:
struct thread_info *thread_ready_list_head = NULL ;
struct thread_info *curr_thread ;	// Current Running Thread


void ready_list_add_tail(struct thread_info *new_node)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b084      	sub	sp, #16
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
	if (thread_ready_list_head == NULL) {
 80007c4:	4b0c      	ldr	r3, [pc, #48]	; (80007f8 <ready_list_add_tail+0x3c>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d103      	bne.n	80007d4 <ready_list_add_tail+0x18>
		thread_ready_list_head = new_node ;
 80007cc:	4a0a      	ldr	r2, [pc, #40]	; (80007f8 <ready_list_add_tail+0x3c>)
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	6013      	str	r3, [r2, #0]
		return ;
 80007d2:	e00d      	b.n	80007f0 <ready_list_add_tail+0x34>
	
	} else {	// new_node is not the first node ,find the end node
		struct thread_info *end = ready_list_find_end(thread_ready_list_head) ;
 80007d4:	4b08      	ldr	r3, [pc, #32]	; (80007f8 <ready_list_add_tail+0x3c>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	4618      	mov	r0, r3
 80007da:	f000 f837 	bl	800084c <ready_list_find_end>
 80007de:	60f8      	str	r0, [r7, #12]

		end->next = new_node ;
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	687a      	ldr	r2, [r7, #4]
 80007e4:	61da      	str	r2, [r3, #28]
		new_node->prev = end ;
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	68fa      	ldr	r2, [r7, #12]
 80007ea:	619a      	str	r2, [r3, #24]

		// update the head node
		end = new_node ;
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	60fb      	str	r3, [r7, #12]
	}
}
 80007f0:	3710      	adds	r7, #16
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	200008b8 	.word	0x200008b8

080007fc <ready_list_remove_head>:


struct thread_info *ready_list_remove_head(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b082      	sub	sp, #8
 8000800:	af00      	add	r7, sp, #0
	struct thread_info *node = thread_ready_list_head ;
 8000802:	4b0f      	ldr	r3, [pc, #60]	; (8000840 <ready_list_remove_head+0x44>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	607b      	str	r3, [r7, #4]
	if (node->next == NULL)	
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	69db      	ldr	r3, [r3, #28]
 800080c:	2b00      	cmp	r3, #0
 800080e:	d103      	bne.n	8000818 <ready_list_remove_head+0x1c>
		usart_send_str(CONSOLE_PTR,"Ready List will be empty!\n\0") ;
 8000810:	490c      	ldr	r1, [pc, #48]	; (8000844 <ready_list_remove_head+0x48>)
 8000812:	480d      	ldr	r0, [pc, #52]	; (8000848 <ready_list_remove_head+0x4c>)
 8000814:	f000 f8ba 	bl	800098c <usart_send_str>

	thread_ready_list_head = node->next ;
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	69db      	ldr	r3, [r3, #28]
 800081c:	4a08      	ldr	r2, [pc, #32]	; (8000840 <ready_list_remove_head+0x44>)
 800081e:	6013      	str	r3, [r2, #0]
	thread_ready_list_head->prev = NULL ;
 8000820:	4b07      	ldr	r3, [pc, #28]	; (8000840 <ready_list_remove_head+0x44>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	2200      	movs	r2, #0
 8000826:	619a      	str	r2, [r3, #24]

	node->prev = NULL ;
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	2200      	movs	r2, #0
 800082c:	619a      	str	r2, [r3, #24]
	node->next = NULL ;
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	2200      	movs	r2, #0
 8000832:	61da      	str	r2, [r3, #28]

	return node ;
 8000834:	687b      	ldr	r3, [r7, #4]
}
 8000836:	4618      	mov	r0, r3
 8000838:	3708      	adds	r7, #8
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	200008b8 	.word	0x200008b8
 8000844:	08000bf8 	.word	0x08000bf8
 8000848:	40004400 	.word	0x40004400

0800084c <ready_list_find_end>:


struct thread_info *ready_list_find_end(struct thread_info *head)
{
 800084c:	b480      	push	{r7}
 800084e:	b085      	sub	sp, #20
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
	while (head->next != NULL) {
 8000854:	e002      	b.n	800085c <ready_list_find_end+0x10>
		head = head->next ;
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	69db      	ldr	r3, [r3, #28]
 800085a:	607b      	str	r3, [r7, #4]
	while (head->next != NULL) {
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	69db      	ldr	r3, [r3, #28]
 8000860:	2b00      	cmp	r3, #0
 8000862:	d1f8      	bne.n	8000856 <ready_list_find_end+0xa>
	}
	struct thread_info *end = head ;
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	60fb      	str	r3, [r7, #12]

	return end ;
 8000868:	68fb      	ldr	r3, [r7, #12]
}
 800086a:	4618      	mov	r0, r3
 800086c:	3714      	adds	r7, #20
 800086e:	46bd      	mov	sp, r7
 8000870:	bc80      	pop	{r7}
 8000872:	4770      	bx	lr

08000874 <thread_create>:

/**
 * Create Thread 
 */ 
void thread_create(struct thread_info *thread ,void (*thread_entry)(void) ,uint8_t *stk_bottom)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b086      	sub	sp, #24
 8000878:	af00      	add	r7, sp, #0
 800087a:	60f8      	str	r0, [r7, #12]
 800087c:	60b9      	str	r1, [r7, #8]
 800087e:	607a      	str	r2, [r7, #4]
	// Assign thread id
	thread->tid = (uint16_t)thread_id ;
 8000880:	4b1b      	ldr	r3, [pc, #108]	; (80008f0 <thread_create+0x7c>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	b29b      	uxth	r3, r3
 8000886:	461a      	mov	r2, r3
 8000888:	68fb      	ldr	r3, [r7, #12]
 800088a:	601a      	str	r2, [r3, #0]
	thread_id++ ;
 800088c:	4b18      	ldr	r3, [pc, #96]	; (80008f0 <thread_create+0x7c>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	3301      	adds	r3, #1
 8000892:	4a17      	ldr	r2, [pc, #92]	; (80008f0 <thread_create+0x7c>)
 8000894:	6013      	str	r3, [r2, #0]

	// Setup stack
	uint32_t *stktop = (uint32_t *)(stk_bottom + (STACK_SIZE)) ;
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800089c:	617b      	str	r3, [r7, #20]
	thread->stack_top = stktop ;
 800089e:	68fb      	ldr	r3, [r7, #12]
 80008a0:	697a      	ldr	r2, [r7, #20]
 80008a2:	60da      	str	r2, [r3, #12]
	thread->stack_bottom = (uint32_t *)stk_bottom ;
 80008a4:	68fb      	ldr	r3, [r7, #12]
 80008a6:	687a      	ldr	r2, [r7, #4]
 80008a8:	611a      	str	r2, [r3, #16]

	// thread->context is the SP too.
	thread->context = (struct thread_context *)(thread->stack_top - 16) ;
 80008aa:	68fb      	ldr	r3, [r7, #12]
 80008ac:	68db      	ldr	r3, [r3, #12]
 80008ae:	f1a3 0240 	sub.w	r2, r3, #64	; 0x40
 80008b2:	68fb      	ldr	r3, [r7, #12]
 80008b4:	615a      	str	r2, [r3, #20]

	// Setup Entry of thread in context structure
	thread->entry = thread_entry ;
 80008b6:	68fb      	ldr	r3, [r7, #12]
 80008b8:	68ba      	ldr	r2, [r7, #8]
 80008ba:	609a      	str	r2, [r3, #8]
	thread->context->pc = (uint32_t)thread_entry ;
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	695b      	ldr	r3, [r3, #20]
 80008c0:	68ba      	ldr	r2, [r7, #8]
 80008c2:	639a      	str	r2, [r3, #56]	; 0x38
	thread->context->xpsr = THUMB_BIT << XPSR_T_BIT_SHIFT ;
 80008c4:	68fb      	ldr	r3, [r7, #12]
 80008c6:	695b      	ldr	r3, [r3, #20]
 80008c8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80008cc:	63da      	str	r2, [r3, #60]	; 0x3c

	// Setup the state as READY
	thread->state = THREAD_READY ;
 80008ce:	68fb      	ldr	r3, [r7, #12]
 80008d0:	2200      	movs	r2, #0
 80008d2:	605a      	str	r2, [r3, #4]

	//Add the thread to ready list
	thread->prev = NULL ;
 80008d4:	68fb      	ldr	r3, [r7, #12]
 80008d6:	2200      	movs	r2, #0
 80008d8:	619a      	str	r2, [r3, #24]
	thread->next = NULL ;
 80008da:	68fb      	ldr	r3, [r7, #12]
 80008dc:	2200      	movs	r2, #0
 80008de:	61da      	str	r2, [r3, #28]
	ready_list_add_tail(thread) ;
 80008e0:	68f8      	ldr	r0, [r7, #12]
 80008e2:	f7ff ff6b 	bl	80007bc <ready_list_add_tail>
}
 80008e6:	bf00      	nop
 80008e8:	3718      	adds	r7, #24
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	20000034 	.word	0x20000034

080008f4 <scheduler>:



// You can implement your scheduler here
void scheduler(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b082      	sub	sp, #8
 80008f8:	af00      	add	r7, sp, #0
	curr_thread->state = THREAD_READY ;
 80008fa:	4b0c      	ldr	r3, [pc, #48]	; (800092c <scheduler+0x38>)
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	2200      	movs	r2, #0
 8000900:	605a      	str	r2, [r3, #4]
	curr_thread = NULL ;
 8000902:	4b0a      	ldr	r3, [pc, #40]	; (800092c <scheduler+0x38>)
 8000904:	2200      	movs	r2, #0
 8000906:	601a      	str	r2, [r3, #0]

	struct thread_info *de_q_thread = ready_list_remove_head() ;
 8000908:	f7ff ff78 	bl	80007fc <ready_list_remove_head>
 800090c:	6078      	str	r0, [r7, #4]
	ready_list_add_tail(de_q_thread) ;
 800090e:	6878      	ldr	r0, [r7, #4]
 8000910:	f7ff ff54 	bl	80007bc <ready_list_add_tail>

	curr_thread = thread_ready_list_head ;
 8000914:	4b06      	ldr	r3, [pc, #24]	; (8000930 <scheduler+0x3c>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	4a04      	ldr	r2, [pc, #16]	; (800092c <scheduler+0x38>)
 800091a:	6013      	str	r3, [r2, #0]
	curr_thread->state = THREAD_RUNNING ;
 800091c:	4b03      	ldr	r3, [pc, #12]	; (800092c <scheduler+0x38>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	2201      	movs	r2, #1
 8000922:	605a      	str	r2, [r3, #4]
}
 8000924:	bf00      	nop
 8000926:	3708      	adds	r7, #8
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	200008bc 	.word	0x200008bc
 8000930:	200008b8 	.word	0x200008b8

08000934 <first_thread_init>:


void first_thread_init(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
	curr_thread = thread_ready_list_head ;
 8000938:	4b05      	ldr	r3, [pc, #20]	; (8000950 <first_thread_init+0x1c>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	4a05      	ldr	r2, [pc, #20]	; (8000954 <first_thread_init+0x20>)
 800093e:	6013      	str	r3, [r2, #0]
	curr_thread->state = THREAD_RUNNING ;
 8000940:	4b04      	ldr	r3, [pc, #16]	; (8000954 <first_thread_init+0x20>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	2201      	movs	r2, #1
 8000946:	605a      	str	r2, [r3, #4]

}
 8000948:	bf00      	nop
 800094a:	46bd      	mov	sp, r7
 800094c:	bc80      	pop	{r7}
 800094e:	4770      	bx	lr
 8000950:	200008b8 	.word	0x200008b8
 8000954:	200008bc 	.word	0x200008bc

08000958 <usart_send_char>:
#include "usart.h"
#include "gpio.h"
#include "../lib/common.h"

void usart_send_char(USART_TypeDef * usartx ,char ch)
{
 8000958:	b480      	push	{r7}
 800095a:	b083      	sub	sp, #12
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
 8000960:	460b      	mov	r3, r1
 8000962:	70fb      	strb	r3, [r7, #3]
	while (!((usartx->SR) & USART_SR_TXE));
 8000964:	bf00      	nop
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	881b      	ldrh	r3, [r3, #0]
 800096a:	b29b      	uxth	r3, r3
 800096c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000970:	2b00      	cmp	r3, #0
 8000972:	d0f8      	beq.n	8000966 <usart_send_char+0xe>

	USART2->DR = ch;
 8000974:	4b04      	ldr	r3, [pc, #16]	; (8000988 <usart_send_char+0x30>)
 8000976:	78fa      	ldrb	r2, [r7, #3]
 8000978:	b292      	uxth	r2, r2
 800097a:	809a      	strh	r2, [r3, #4]
}
 800097c:	bf00      	nop
 800097e:	370c      	adds	r7, #12
 8000980:	46bd      	mov	sp, r7
 8000982:	bc80      	pop	{r7}
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop
 8000988:	40004400 	.word	0x40004400

0800098c <usart_send_str>:



void usart_send_str(USART_TypeDef * usartx ,const char *s)
{
 800098c:	b480      	push	{r7}
 800098e:	b083      	sub	sp, #12
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
 8000994:	6039      	str	r1, [r7, #0]
	while (*s) {
 8000996:	e00f      	b.n	80009b8 <usart_send_str+0x2c>
		while (!((usartx->SR) & USART_SR_TXE));
 8000998:	bf00      	nop
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	881b      	ldrh	r3, [r3, #0]
 800099e:	b29b      	uxth	r3, r3
 80009a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d0f8      	beq.n	800099a <usart_send_str+0xe>

		USART2->DR = *s;
 80009a8:	683b      	ldr	r3, [r7, #0]
 80009aa:	781a      	ldrb	r2, [r3, #0]
 80009ac:	4b07      	ldr	r3, [pc, #28]	; (80009cc <usart_send_str+0x40>)
 80009ae:	b292      	uxth	r2, r2
 80009b0:	809a      	strh	r2, [r3, #4]

		s++ ;
 80009b2:	683b      	ldr	r3, [r7, #0]
 80009b4:	3301      	adds	r3, #1
 80009b6:	603b      	str	r3, [r7, #0]
	while (*s) {
 80009b8:	683b      	ldr	r3, [r7, #0]
 80009ba:	781b      	ldrb	r3, [r3, #0]
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d1eb      	bne.n	8000998 <usart_send_str+0xc>
	}
}
 80009c0:	bf00      	nop
 80009c2:	bf00      	nop
 80009c4:	370c      	adds	r7, #12
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bc80      	pop	{r7}
 80009ca:	4770      	bx	lr
 80009cc:	40004400 	.word	0x40004400

080009d0 <usart_clk_enable>:


void usart_clk_enable(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
	SET_BIT(RCC->APB2ENR ,RCC_APB2ENR_USART1EN) ;
 80009d4:	4b07      	ldr	r3, [pc, #28]	; (80009f4 <usart_clk_enable+0x24>)
 80009d6:	699b      	ldr	r3, [r3, #24]
 80009d8:	4a06      	ldr	r2, [pc, #24]	; (80009f4 <usart_clk_enable+0x24>)
 80009da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009de:	6193      	str	r3, [r2, #24]
	SET_BIT(RCC->APB1ENR ,RCC_APB1ENR_USART2EN) ;
 80009e0:	4b04      	ldr	r3, [pc, #16]	; (80009f4 <usart_clk_enable+0x24>)
 80009e2:	69db      	ldr	r3, [r3, #28]
 80009e4:	4a03      	ldr	r2, [pc, #12]	; (80009f4 <usart_clk_enable+0x24>)
 80009e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009ea:	61d3      	str	r3, [r2, #28]
	//SET_BIT(RCC->APB1ENR ,RCC_APB1ENR_USART3EN) ; // Enable USART3 ,qemu failed but success at keil
}
 80009ec:	bf00      	nop
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bc80      	pop	{r7}
 80009f2:	4770      	bx	lr
 80009f4:	40021000 	.word	0x40021000

080009f8 <config_gpio_for_usart>:
 * USART3	TX----PB10
 * 			RX----PB11
 * 
 */ 
int config_gpio_for_usart(USART_TypeDef * usartx)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b082      	sub	sp, #8
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
	if (usartx == USART1) {
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	4a2a      	ldr	r2, [pc, #168]	; (8000aac <config_gpio_for_usart+0xb4>)
 8000a04:	4293      	cmp	r3, r2
 8000a06:	d115      	bne.n	8000a34 <config_gpio_for_usart+0x3c>
		//Pull-up PA10 for USART1 ,GPIOA->ODR |= (1 << 10) ;	
		SET_SINGLE_BIT(GPIOA->ODR ,10) ;
 8000a08:	4b29      	ldr	r3, [pc, #164]	; (8000ab0 <config_gpio_for_usart+0xb8>)
 8000a0a:	68db      	ldr	r3, [r3, #12]
 8000a0c:	4a28      	ldr	r2, [pc, #160]	; (8000ab0 <config_gpio_for_usart+0xb8>)
 8000a0e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a12:	60d3      	str	r3, [r2, #12]

		// Config GPIO for USART1
		config_gpio_mode_bits(GPIOA ,9 ,MODE_OUTPUT_50M) ;
 8000a14:	2203      	movs	r2, #3
 8000a16:	2109      	movs	r1, #9
 8000a18:	4825      	ldr	r0, [pc, #148]	; (8000ab0 <config_gpio_for_usart+0xb8>)
 8000a1a:	f7ff fb91 	bl	8000140 <config_gpio_mode_bits>
		config_gpio_cnf_bits(GPIOA ,9 ,ALT_OUT_PUSHPULL) ;
 8000a1e:	2202      	movs	r2, #2
 8000a20:	2109      	movs	r1, #9
 8000a22:	4823      	ldr	r0, [pc, #140]	; (8000ab0 <config_gpio_for_usart+0xb8>)
 8000a24:	f7ff fbd1 	bl	80001ca <config_gpio_cnf_bits>
		config_gpio_mode_bits(GPIOA ,10 ,MODE_INPUT) ;
 8000a28:	2200      	movs	r2, #0
 8000a2a:	210a      	movs	r1, #10
 8000a2c:	4820      	ldr	r0, [pc, #128]	; (8000ab0 <config_gpio_for_usart+0xb8>)
 8000a2e:	f7ff fb87 	bl	8000140 <config_gpio_mode_bits>
 8000a32:	e036      	b.n	8000aa2 <config_gpio_for_usart+0xaa>

	} else if (usartx == USART2) {
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	4a1f      	ldr	r2, [pc, #124]	; (8000ab4 <config_gpio_for_usart+0xbc>)
 8000a38:	4293      	cmp	r3, r2
 8000a3a:	d115      	bne.n	8000a68 <config_gpio_for_usart+0x70>
		//Pull-up PA3 for USART2 ,GPIOA->ODR |= (1 << 3) ;	
		SET_SINGLE_BIT(GPIOA->ODR ,3) ;
 8000a3c:	4b1c      	ldr	r3, [pc, #112]	; (8000ab0 <config_gpio_for_usart+0xb8>)
 8000a3e:	68db      	ldr	r3, [r3, #12]
 8000a40:	4a1b      	ldr	r2, [pc, #108]	; (8000ab0 <config_gpio_for_usart+0xb8>)
 8000a42:	f043 0308 	orr.w	r3, r3, #8
 8000a46:	60d3      	str	r3, [r2, #12]

		//Config GPIO for USART2
		config_gpio_mode_bits(GPIOA ,2 ,MODE_OUTPUT_50M) ;
 8000a48:	2203      	movs	r2, #3
 8000a4a:	2102      	movs	r1, #2
 8000a4c:	4818      	ldr	r0, [pc, #96]	; (8000ab0 <config_gpio_for_usart+0xb8>)
 8000a4e:	f7ff fb77 	bl	8000140 <config_gpio_mode_bits>
		config_gpio_cnf_bits(GPIOA ,2 ,ALT_OUT_PUSHPULL) ;
 8000a52:	2202      	movs	r2, #2
 8000a54:	2102      	movs	r1, #2
 8000a56:	4816      	ldr	r0, [pc, #88]	; (8000ab0 <config_gpio_for_usart+0xb8>)
 8000a58:	f7ff fbb7 	bl	80001ca <config_gpio_cnf_bits>
		config_gpio_mode_bits(GPIOA ,3 ,MODE_INPUT) ;
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	2103      	movs	r1, #3
 8000a60:	4813      	ldr	r0, [pc, #76]	; (8000ab0 <config_gpio_for_usart+0xb8>)
 8000a62:	f7ff fb6d 	bl	8000140 <config_gpio_mode_bits>
 8000a66:	e01c      	b.n	8000aa2 <config_gpio_for_usart+0xaa>

	} else if (usartx == USART3) {
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	4a13      	ldr	r2, [pc, #76]	; (8000ab8 <config_gpio_for_usart+0xc0>)
 8000a6c:	4293      	cmp	r3, r2
 8000a6e:	d115      	bne.n	8000a9c <config_gpio_for_usart+0xa4>
		//Pull-up PB11 for USART3 ,GPIOB->ODR |= (1 << 11) ;	
		SET_SINGLE_BIT(GPIOB->ODR ,11) ;
 8000a70:	4b12      	ldr	r3, [pc, #72]	; (8000abc <config_gpio_for_usart+0xc4>)
 8000a72:	68db      	ldr	r3, [r3, #12]
 8000a74:	4a11      	ldr	r2, [pc, #68]	; (8000abc <config_gpio_for_usart+0xc4>)
 8000a76:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000a7a:	60d3      	str	r3, [r2, #12]

		//Config GPIO for USART3
		config_gpio_mode_bits(GPIOB ,10 ,MODE_OUTPUT_50M) ;
 8000a7c:	2203      	movs	r2, #3
 8000a7e:	210a      	movs	r1, #10
 8000a80:	480e      	ldr	r0, [pc, #56]	; (8000abc <config_gpio_for_usart+0xc4>)
 8000a82:	f7ff fb5d 	bl	8000140 <config_gpio_mode_bits>
		config_gpio_cnf_bits(GPIOB ,10 ,ALT_OUT_PUSHPULL) ;
 8000a86:	2202      	movs	r2, #2
 8000a88:	210a      	movs	r1, #10
 8000a8a:	480c      	ldr	r0, [pc, #48]	; (8000abc <config_gpio_for_usart+0xc4>)
 8000a8c:	f7ff fb9d 	bl	80001ca <config_gpio_cnf_bits>
		config_gpio_mode_bits(GPIOB ,11 ,MODE_INPUT) ;
 8000a90:	2200      	movs	r2, #0
 8000a92:	210b      	movs	r1, #11
 8000a94:	4809      	ldr	r0, [pc, #36]	; (8000abc <config_gpio_for_usart+0xc4>)
 8000a96:	f7ff fb53 	bl	8000140 <config_gpio_mode_bits>
 8000a9a:	e002      	b.n	8000aa2 <config_gpio_for_usart+0xaa>

	} else {
		return -1 ;
 8000a9c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000aa0:	e000      	b.n	8000aa4 <config_gpio_for_usart+0xac>
	}

	return 0 ;
 8000aa2:	2300      	movs	r3, #0

}
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	3708      	adds	r7, #8
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	40013800 	.word	0x40013800
 8000ab0:	40010800 	.word	0x40010800
 8000ab4:	40004400 	.word	0x40004400
 8000ab8:	40004800 	.word	0x40004800
 8000abc:	40010c00 	.word	0x40010c00

08000ac0 <usart_init>:


void usart_init(USART_TypeDef * usartx)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
	gpio_clk_enable() ;	// Enable clks for GPIOA and GPIOB
 8000ac8:	f7ff fb20 	bl	800010c <gpio_clk_enable>
	config_gpio_for_usart(usartx) ;	//Config GPIO for USARTx
 8000acc:	6878      	ldr	r0, [r7, #4]
 8000ace:	f7ff ff93 	bl	80009f8 <config_gpio_for_usart>
	
	usart_clk_enable() ;
 8000ad2:	f7ff ff7d 	bl	80009d0 <usart_clk_enable>

	// Enable USART
	usart_enable(usartx) ;
 8000ad6:	6878      	ldr	r0, [r7, #4]
 8000ad8:	f000 f804 	bl	8000ae4 <usart_enable>
}
 8000adc:	bf00      	nop
 8000ade:	3708      	adds	r7, #8
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}

08000ae4 <usart_enable>:


void usart_enable(USART_TypeDef * usartx)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b083      	sub	sp, #12
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
	// Enable Receiver
	SET_SINGLE_BIT(usartx->CR1 ,2) ;
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	899b      	ldrh	r3, [r3, #12]
 8000af0:	b29b      	uxth	r3, r3
 8000af2:	f043 0304 	orr.w	r3, r3, #4
 8000af6:	b29a      	uxth	r2, r3
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	819a      	strh	r2, [r3, #12]

	// Enable Transmitter
	SET_SINGLE_BIT(usartx->CR1 ,3) ;
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	899b      	ldrh	r3, [r3, #12]
 8000b00:	b29b      	uxth	r3, r3
 8000b02:	f043 0308 	orr.w	r3, r3, #8
 8000b06:	b29a      	uxth	r2, r3
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	819a      	strh	r2, [r3, #12]

	//Enable USART
	SET_SINGLE_BIT(usartx->CR1 ,13) ;
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	899b      	ldrh	r3, [r3, #12]
 8000b10:	b29b      	uxth	r3, r3
 8000b12:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000b16:	b29a      	uxth	r2, r3
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	819a      	strh	r2, [r3, #12]
}
 8000b1c:	bf00      	nop
 8000b1e:	370c      	adds	r7, #12
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bc80      	pop	{r7}
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <thread_test1>:
	,thread_test4
} ;


void thread_test1(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
	while (1) {
		usart_send_str(CONSOLE_PTR ,s1) ;
 8000b2c:	4b03      	ldr	r3, [pc, #12]	; (8000b3c <thread_test1+0x14>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4619      	mov	r1, r3
 8000b32:	4803      	ldr	r0, [pc, #12]	; (8000b40 <thread_test1+0x18>)
 8000b34:	f7ff ff2a 	bl	800098c <usart_send_str>
 8000b38:	e7f8      	b.n	8000b2c <thread_test1+0x4>
 8000b3a:	bf00      	nop
 8000b3c:	20000014 	.word	0x20000014
 8000b40:	40004400 	.word	0x40004400

08000b44 <thread_test2>:
	
}


void thread_test2(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
	while (1) {
		usart_send_str(CONSOLE_PTR ,s2) ;
 8000b48:	4b03      	ldr	r3, [pc, #12]	; (8000b58 <thread_test2+0x14>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	4803      	ldr	r0, [pc, #12]	; (8000b5c <thread_test2+0x18>)
 8000b50:	f7ff ff1c 	bl	800098c <usart_send_str>
 8000b54:	e7f8      	b.n	8000b48 <thread_test2+0x4>
 8000b56:	bf00      	nop
 8000b58:	20000018 	.word	0x20000018
 8000b5c:	40004400 	.word	0x40004400

08000b60 <thread_test3>:
	}
}


void thread_test3(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0
	while (1) {
		usart_send_str(CONSOLE_PTR ,s3) ;
 8000b64:	4b03      	ldr	r3, [pc, #12]	; (8000b74 <thread_test3+0x14>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4619      	mov	r1, r3
 8000b6a:	4803      	ldr	r0, [pc, #12]	; (8000b78 <thread_test3+0x18>)
 8000b6c:	f7ff ff0e 	bl	800098c <usart_send_str>
 8000b70:	e7f8      	b.n	8000b64 <thread_test3+0x4>
 8000b72:	bf00      	nop
 8000b74:	2000001c 	.word	0x2000001c
 8000b78:	40004400 	.word	0x40004400

08000b7c <thread_test4>:
	}
}


void thread_test4(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
	while (1) {
		usart_send_str(CONSOLE_PTR ,s4) ;
 8000b80:	4b03      	ldr	r3, [pc, #12]	; (8000b90 <thread_test4+0x14>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4619      	mov	r1, r3
 8000b86:	4803      	ldr	r0, [pc, #12]	; (8000b94 <thread_test4+0x18>)
 8000b88:	f7ff ff00 	bl	800098c <usart_send_str>
 8000b8c:	e7f8      	b.n	8000b80 <thread_test4+0x4>
 8000b8e:	bf00      	nop
 8000b90:	20000020 	.word	0x20000020
 8000b94:	40004400 	.word	0x40004400

08000b98 <Reset_Handler>:
 8000b98:	2100      	movs	r1, #0
 8000b9a:	e003      	b.n	8000ba4 <LoopCopyDataInit>

08000b9c <CopyDataInit>:
 8000b9c:	4b0a      	ldr	r3, [pc, #40]	; (8000bc8 <LoopFillZerobss+0x10>)
 8000b9e:	585b      	ldr	r3, [r3, r1]
 8000ba0:	5043      	str	r3, [r0, r1]
 8000ba2:	3104      	adds	r1, #4

08000ba4 <LoopCopyDataInit>:
 8000ba4:	4809      	ldr	r0, [pc, #36]	; (8000bcc <LoopFillZerobss+0x14>)
 8000ba6:	4b0a      	ldr	r3, [pc, #40]	; (8000bd0 <LoopFillZerobss+0x18>)
 8000ba8:	1842      	adds	r2, r0, r1
 8000baa:	429a      	cmp	r2, r3
 8000bac:	d3f6      	bcc.n	8000b9c <CopyDataInit>
 8000bae:	4a09      	ldr	r2, [pc, #36]	; (8000bd4 <LoopFillZerobss+0x1c>)
 8000bb0:	e002      	b.n	8000bb8 <LoopFillZerobss>

08000bb2 <FillZerobss>:
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	f842 3b04 	str.w	r3, [r2], #4

08000bb8 <LoopFillZerobss>:
 8000bb8:	4b07      	ldr	r3, [pc, #28]	; (8000bd8 <LoopFillZerobss+0x20>)
 8000bba:	429a      	cmp	r2, r3
 8000bbc:	d3f9      	bcc.n	8000bb2 <FillZerobss>
 8000bbe:	f7ff fc33 	bl	8000428 <SystemInit>
 8000bc2:	f7ff fbaf 	bl	8000324 <main>
 8000bc6:	4770      	bx	lr
 8000bc8:	08000c42 	.word	0x08000c42
 8000bcc:	20000000 	.word	0x20000000
 8000bd0:	20000034 	.word	0x20000034
 8000bd4:	20000034 	.word	0x20000034
 8000bd8:	200008c0 	.word	0x200008c0

08000bdc <ADC1_2_IRQHandler>:
 8000bdc:	e7fe      	b.n	8000bdc <ADC1_2_IRQHandler>
 8000bde:	0000      	movs	r0, r0
 8000be0:	6576654e 	.word	0x6576654e
 8000be4:	72502072 	.word	0x72502072
 8000be8:	20746e69 	.word	0x20746e69
 8000bec:	73696854 	.word	0x73696854
 8000bf0:	6e694c20 	.word	0x6e694c20
 8000bf4:	000a2e65 	.word	0x000a2e65
 8000bf8:	64616552 	.word	0x64616552
 8000bfc:	694c2079 	.word	0x694c2079
 8000c00:	77207473 	.word	0x77207473
 8000c04:	206c6c69 	.word	0x206c6c69
 8000c08:	65206562 	.word	0x65206562
 8000c0c:	7974706d 	.word	0x7974706d
 8000c10:	00000a21 	.word	0x00000a21
 8000c14:	65726874 	.word	0x65726874
 8000c18:	0a316461 	.word	0x0a316461
 8000c1c:	00000000 	.word	0x00000000
 8000c20:	65726874 	.word	0x65726874
 8000c24:	0a326461 	.word	0x0a326461
 8000c28:	00000000 	.word	0x00000000
 8000c2c:	65726874 	.word	0x65726874
 8000c30:	0a336461 	.word	0x0a336461
 8000c34:	00000000 	.word	0x00000000
 8000c38:	65726874 	.word	0x65726874
 8000c3c:	0a346461 	.word	0x0a346461
	...
