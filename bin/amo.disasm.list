
../bin/amo.elf:     file format elf32-littlearm


Disassembly of section .text:

08000000 <g_pfnVectors>:
 8000000:	00 50 00 20 71 07 00 08 b5 07 00 08 b5 07 00 08     .P. q...........
 8000010:	b5 07 00 08 b5 07 00 08 b5 07 00 08 00 00 00 00     ................
	...
 800002c:	b5 07 00 08 b5 07 00 08 00 00 00 00 b5 07 00 08     ................
 800003c:	c1 05 00 08 b5 07 00 08 b5 07 00 08 b5 07 00 08     ................
 800004c:	b5 07 00 08 b5 07 00 08 b5 07 00 08 b5 07 00 08     ................
 800005c:	b5 07 00 08 b5 07 00 08 b5 07 00 08 b5 07 00 08     ................
 800006c:	b5 07 00 08 b5 07 00 08 b5 07 00 08 b5 07 00 08     ................
 800007c:	b5 07 00 08 b5 07 00 08 b5 07 00 08 b5 07 00 08     ................
 800008c:	b5 07 00 08 b5 07 00 08 b5 07 00 08 b5 07 00 08     ................
 800009c:	b5 07 00 08 b5 07 00 08 b5 07 00 08 b5 07 00 08     ................
 80000ac:	b5 07 00 08 b5 07 00 08 b5 07 00 08 b5 07 00 08     ................
 80000bc:	b5 07 00 08 b5 07 00 08 b5 07 00 08 b5 07 00 08     ................
 80000cc:	b5 07 00 08 b5 07 00 08 b5 07 00 08 b5 07 00 08     ................
 80000dc:	b5 07 00 08 b5 07 00 08 b5 07 00 08 b5 07 00 08     ................
	...
 8000108:	5f f8 08 f1                                         _...

0800010c <main>:
#include "../driver/systick.h"



void main(void)
{
 800010c:	b580      	push	{r7, lr}
 800010e:	af00      	add	r7, sp, #0
    usart_init(CONSOLE_PTR) ;
 8000110:	4803      	ldr	r0, [pc, #12]	; (8000120 <main+0x14>)
 8000112:	f000 faf9 	bl	8000708 <usart_init>
	systick_int_init(1000) ; //10ms
 8000116:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800011a:	f000 fa35 	bl	8000588 <systick_int_init>

	while (1) ;
 800011e:	e7fe      	b.n	800011e <main+0x12>
 8000120:	40004400 	.word	0x40004400

08000124 <gpio_clk_enable>:
#include "gpio.h"
#include "../lib/common.h"


void gpio_clk_enable(void)
{
 8000124:	b480      	push	{r7}
 8000126:	af00      	add	r7, sp, #0
	// Enable the clocks for GPIOA ports  ,RCC->APB2ENR |= RCC_APB2ENR_IOPAEN ;	
	// Enable the clks for GPIOB ,RCC->APB2ENR |= RCC_APB2ENR_IOPBEN ;	
	SET_BIT(RCC->APB2ENR ,RCC_APB2ENR_IOPAEN) ;
 8000128:	4b07      	ldr	r3, [pc, #28]	; (8000148 <gpio_clk_enable+0x24>)
 800012a:	699b      	ldr	r3, [r3, #24]
 800012c:	4a06      	ldr	r2, [pc, #24]	; (8000148 <gpio_clk_enable+0x24>)
 800012e:	f043 0304 	orr.w	r3, r3, #4
 8000132:	6193      	str	r3, [r2, #24]
	SET_BIT(RCC->APB2ENR ,RCC_APB2ENR_IOPBEN) ;
 8000134:	4b04      	ldr	r3, [pc, #16]	; (8000148 <gpio_clk_enable+0x24>)
 8000136:	699b      	ldr	r3, [r3, #24]
 8000138:	4a03      	ldr	r2, [pc, #12]	; (8000148 <gpio_clk_enable+0x24>)
 800013a:	f043 0308 	orr.w	r3, r3, #8
 800013e:	6193      	str	r3, [r2, #24]
}
 8000140:	bf00      	nop
 8000142:	46bd      	mov	sp, r7
 8000144:	bc80      	pop	{r7}
 8000146:	4770      	bx	lr
 8000148:	40021000 	.word	0x40021000

0800014c <config_gpio_mode_bits>:


int config_gpio_mode_bits(GPIO_TypeDef * GPIOx ,uint8_t pin ,uint8_t mode_bits)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
 8000154:	460b      	mov	r3, r1
 8000156:	70fb      	strb	r3, [r7, #3]
 8000158:	4613      	mov	r3, r2
 800015a:	70bb      	strb	r3, [r7, #2]
	if (pin <= 7) {
 800015c:	78fb      	ldrb	r3, [r7, #3]
 800015e:	2b07      	cmp	r3, #7
 8000160:	d80a      	bhi.n	8000178 <config_gpio_mode_bits+0x2c>
		GPIOx->CRL |= (uint32_t)(mode_bits << (4 * pin)) ;
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	681b      	ldr	r3, [r3, #0]
 8000166:	78b9      	ldrb	r1, [r7, #2]
 8000168:	78fa      	ldrb	r2, [r7, #3]
 800016a:	0092      	lsls	r2, r2, #2
 800016c:	fa01 f202 	lsl.w	r2, r1, r2
 8000170:	431a      	orrs	r2, r3
 8000172:	687b      	ldr	r3, [r7, #4]
 8000174:	601a      	str	r2, [r3, #0]
 8000176:	e011      	b.n	800019c <config_gpio_mode_bits+0x50>

	} else if (pin <= 15) {
 8000178:	78fb      	ldrb	r3, [r7, #3]
 800017a:	2b0f      	cmp	r3, #15
 800017c:	d80b      	bhi.n	8000196 <config_gpio_mode_bits+0x4a>
		GPIOx->CRH |= (uint32_t)(mode_bits << (4 * (pin - 7))) ;
 800017e:	687b      	ldr	r3, [r7, #4]
 8000180:	685b      	ldr	r3, [r3, #4]
 8000182:	78b9      	ldrb	r1, [r7, #2]
 8000184:	78fa      	ldrb	r2, [r7, #3]
 8000186:	3a07      	subs	r2, #7
 8000188:	0092      	lsls	r2, r2, #2
 800018a:	fa01 f202 	lsl.w	r2, r1, r2
 800018e:	431a      	orrs	r2, r3
 8000190:	687b      	ldr	r3, [r7, #4]
 8000192:	605a      	str	r2, [r3, #4]
 8000194:	e002      	b.n	800019c <config_gpio_mode_bits+0x50>

	} else {
		return -1 ;
 8000196:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800019a:	e000      	b.n	800019e <config_gpio_mode_bits+0x52>
	}

	return 0 ;
 800019c:	2300      	movs	r3, #0
}
 800019e:	4618      	mov	r0, r3
 80001a0:	370c      	adds	r7, #12
 80001a2:	46bd      	mov	sp, r7
 80001a4:	bc80      	pop	{r7}
 80001a6:	4770      	bx	lr

080001a8 <config_gpio_cnf_bits>:


int config_gpio_cnf_bits(GPIO_TypeDef * GPIOx ,uint8_t pin ,uint8_t cnf_bits)
{
 80001a8:	b480      	push	{r7}
 80001aa:	b085      	sub	sp, #20
 80001ac:	af00      	add	r7, sp, #0
 80001ae:	6078      	str	r0, [r7, #4]
 80001b0:	460b      	mov	r3, r1
 80001b2:	70fb      	strb	r3, [r7, #3]
 80001b4:	4613      	mov	r3, r2
 80001b6:	70bb      	strb	r3, [r7, #2]
	uint8_t bit_shift ;

	if (pin <= 7) {
 80001b8:	78fb      	ldrb	r3, [r7, #3]
 80001ba:	2b07      	cmp	r3, #7
 80001bc:	d80e      	bhi.n	80001dc <config_gpio_cnf_bits+0x34>
		bit_shift = (4 * pin) + 2 ;
 80001be:	78fb      	ldrb	r3, [r7, #3]
 80001c0:	009b      	lsls	r3, r3, #2
 80001c2:	b2db      	uxtb	r3, r3
 80001c4:	3302      	adds	r3, #2
 80001c6:	73fb      	strb	r3, [r7, #15]
		GPIOx->CRL |= (uint32_t)(cnf_bits << bit_shift) ;
 80001c8:	687b      	ldr	r3, [r7, #4]
 80001ca:	681b      	ldr	r3, [r3, #0]
 80001cc:	78b9      	ldrb	r1, [r7, #2]
 80001ce:	7bfa      	ldrb	r2, [r7, #15]
 80001d0:	fa01 f202 	lsl.w	r2, r1, r2
 80001d4:	431a      	orrs	r2, r3
 80001d6:	687b      	ldr	r3, [r7, #4]
 80001d8:	601a      	str	r2, [r3, #0]
 80001da:	e016      	b.n	800020a <config_gpio_cnf_bits+0x62>

	} else if (pin <= 15) {
 80001dc:	78fb      	ldrb	r3, [r7, #3]
 80001de:	2b0f      	cmp	r3, #15
 80001e0:	d810      	bhi.n	8000204 <config_gpio_cnf_bits+0x5c>
		bit_shift = (4 * (pin - 7)) + 2 ;
 80001e2:	78fb      	ldrb	r3, [r7, #3]
 80001e4:	3b07      	subs	r3, #7
 80001e6:	b2db      	uxtb	r3, r3
 80001e8:	009b      	lsls	r3, r3, #2
 80001ea:	b2db      	uxtb	r3, r3
 80001ec:	3302      	adds	r3, #2
 80001ee:	73fb      	strb	r3, [r7, #15]
		GPIOx->CRH |= (uint32_t)(cnf_bits << bit_shift) ;
 80001f0:	687b      	ldr	r3, [r7, #4]
 80001f2:	685b      	ldr	r3, [r3, #4]
 80001f4:	78b9      	ldrb	r1, [r7, #2]
 80001f6:	7bfa      	ldrb	r2, [r7, #15]
 80001f8:	fa01 f202 	lsl.w	r2, r1, r2
 80001fc:	431a      	orrs	r2, r3
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	605a      	str	r2, [r3, #4]
 8000202:	e002      	b.n	800020a <config_gpio_cnf_bits+0x62>

	} else {
		return -1 ;
 8000204:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000208:	e000      	b.n	800020c <config_gpio_cnf_bits+0x64>
	}

	return 0 ;
 800020a:	2300      	movs	r3, #0
}
 800020c:	4618      	mov	r0, r3
 800020e:	3714      	adds	r7, #20
 8000210:	46bd      	mov	sp, r7
 8000212:	bc80      	pop	{r7}
 8000214:	4770      	bx	lr
 8000216:	bf00      	nop
 8000218:	080007c7 	.word	0x080007c7
 800021c:	20000000 	.word	0x20000000
 8000220:	20000014 	.word	0x20000014
 8000224:	20000014 	.word	0x20000014
 8000228:	20000014 	.word	0x20000014

0800022c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800022c:	b580      	push	{r7, lr}
 800022e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000230:	4b15      	ldr	r3, [pc, #84]	; (8000288 <SystemInit+0x5c>)
 8000232:	681b      	ldr	r3, [r3, #0]
 8000234:	4a14      	ldr	r2, [pc, #80]	; (8000288 <SystemInit+0x5c>)
 8000236:	f043 0301 	orr.w	r3, r3, #1
 800023a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 800023c:	4b12      	ldr	r3, [pc, #72]	; (8000288 <SystemInit+0x5c>)
 800023e:	685a      	ldr	r2, [r3, #4]
 8000240:	4911      	ldr	r1, [pc, #68]	; (8000288 <SystemInit+0x5c>)
 8000242:	4b12      	ldr	r3, [pc, #72]	; (800028c <SystemInit+0x60>)
 8000244:	4013      	ands	r3, r2
 8000246:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000248:	4b0f      	ldr	r3, [pc, #60]	; (8000288 <SystemInit+0x5c>)
 800024a:	681b      	ldr	r3, [r3, #0]
 800024c:	4a0e      	ldr	r2, [pc, #56]	; (8000288 <SystemInit+0x5c>)
 800024e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000252:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000256:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000258:	4b0b      	ldr	r3, [pc, #44]	; (8000288 <SystemInit+0x5c>)
 800025a:	681b      	ldr	r3, [r3, #0]
 800025c:	4a0a      	ldr	r2, [pc, #40]	; (8000288 <SystemInit+0x5c>)
 800025e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000262:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8000264:	4b08      	ldr	r3, [pc, #32]	; (8000288 <SystemInit+0x5c>)
 8000266:	685b      	ldr	r3, [r3, #4]
 8000268:	4a07      	ldr	r2, [pc, #28]	; (8000288 <SystemInit+0x5c>)
 800026a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800026e:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8000270:	4b05      	ldr	r3, [pc, #20]	; (8000288 <SystemInit+0x5c>)
 8000272:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000276:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 8000278:	f000 f87e 	bl	8000378 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800027c:	4b04      	ldr	r3, [pc, #16]	; (8000290 <SystemInit+0x64>)
 800027e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000282:	609a      	str	r2, [r3, #8]
#endif 
}
 8000284:	bf00      	nop
 8000286:	bd80      	pop	{r7, pc}
 8000288:	40021000 	.word	0x40021000
 800028c:	f8ff0000 	.word	0xf8ff0000
 8000290:	e000ed00 	.word	0xe000ed00

08000294 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
 8000294:	b480      	push	{r7}
 8000296:	b085      	sub	sp, #20
 8000298:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllmull = 0, pllsource = 0;
 800029a:	2300      	movs	r3, #0
 800029c:	60fb      	str	r3, [r7, #12]
 800029e:	2300      	movs	r3, #0
 80002a0:	60bb      	str	r3, [r7, #8]
 80002a2:	2300      	movs	r3, #0
 80002a4:	607b      	str	r3, [r7, #4]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || (defined STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif /* STM32F10X_LD_VL or STM32F10X_MD_VL or STM32F10X_HD_VL */
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80002a6:	4b2f      	ldr	r3, [pc, #188]	; (8000364 <SystemCoreClockUpdate+0xd0>)
 80002a8:	685b      	ldr	r3, [r3, #4]
 80002aa:	f003 030c 	and.w	r3, r3, #12
 80002ae:	60fb      	str	r3, [r7, #12]
  
  switch (tmp)
 80002b0:	68fb      	ldr	r3, [r7, #12]
 80002b2:	2b08      	cmp	r3, #8
 80002b4:	d011      	beq.n	80002da <SystemCoreClockUpdate+0x46>
 80002b6:	68fb      	ldr	r3, [r7, #12]
 80002b8:	2b08      	cmp	r3, #8
 80002ba:	d83a      	bhi.n	8000332 <SystemCoreClockUpdate+0x9e>
 80002bc:	68fb      	ldr	r3, [r7, #12]
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d003      	beq.n	80002ca <SystemCoreClockUpdate+0x36>
 80002c2:	68fb      	ldr	r3, [r7, #12]
 80002c4:	2b04      	cmp	r3, #4
 80002c6:	d004      	beq.n	80002d2 <SystemCoreClockUpdate+0x3e>
 80002c8:	e033      	b.n	8000332 <SystemCoreClockUpdate+0x9e>
  {
    case 0x00:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 80002ca:	4b27      	ldr	r3, [pc, #156]	; (8000368 <SystemCoreClockUpdate+0xd4>)
 80002cc:	4a27      	ldr	r2, [pc, #156]	; (800036c <SystemCoreClockUpdate+0xd8>)
 80002ce:	601a      	str	r2, [r3, #0]
      break;
 80002d0:	e033      	b.n	800033a <SystemCoreClockUpdate+0xa6>
    case 0x04:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
 80002d2:	4b25      	ldr	r3, [pc, #148]	; (8000368 <SystemCoreClockUpdate+0xd4>)
 80002d4:	4a25      	ldr	r2, [pc, #148]	; (800036c <SystemCoreClockUpdate+0xd8>)
 80002d6:	601a      	str	r2, [r3, #0]
      break;
 80002d8:	e02f      	b.n	800033a <SystemCoreClockUpdate+0xa6>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 80002da:	4b22      	ldr	r3, [pc, #136]	; (8000364 <SystemCoreClockUpdate+0xd0>)
 80002dc:	685b      	ldr	r3, [r3, #4]
 80002de:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80002e2:	60bb      	str	r3, [r7, #8]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 80002e4:	4b1f      	ldr	r3, [pc, #124]	; (8000364 <SystemCoreClockUpdate+0xd0>)
 80002e6:	685b      	ldr	r3, [r3, #4]
 80002e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80002ec:	607b      	str	r3, [r7, #4]
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
 80002ee:	68bb      	ldr	r3, [r7, #8]
 80002f0:	0c9b      	lsrs	r3, r3, #18
 80002f2:	3302      	adds	r3, #2
 80002f4:	60bb      	str	r3, [r7, #8]
      
      if (pllsource == 0x00)
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d106      	bne.n	800030a <SystemCoreClockUpdate+0x76>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
 80002fc:	68bb      	ldr	r3, [r7, #8]
 80002fe:	4a1c      	ldr	r2, [pc, #112]	; (8000370 <SystemCoreClockUpdate+0xdc>)
 8000300:	fb02 f303 	mul.w	r3, r2, r3
 8000304:	4a18      	ldr	r2, [pc, #96]	; (8000368 <SystemCoreClockUpdate+0xd4>)
 8000306:	6013      	str	r3, [r2, #0]
          pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8 ) + 2; 
          SystemCoreClock = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
 8000308:	e017      	b.n	800033a <SystemCoreClockUpdate+0xa6>
        if ((RCC->CFGR & RCC_CFGR_PLLXTPRE) != (uint32_t)RESET)
 800030a:	4b16      	ldr	r3, [pc, #88]	; (8000364 <SystemCoreClockUpdate+0xd0>)
 800030c:	685b      	ldr	r3, [r3, #4]
 800030e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000312:	2b00      	cmp	r3, #0
 8000314:	d006      	beq.n	8000324 <SystemCoreClockUpdate+0x90>
          SystemCoreClock = (HSE_VALUE >> 1) * pllmull;
 8000316:	68bb      	ldr	r3, [r7, #8]
 8000318:	4a15      	ldr	r2, [pc, #84]	; (8000370 <SystemCoreClockUpdate+0xdc>)
 800031a:	fb02 f303 	mul.w	r3, r2, r3
 800031e:	4a12      	ldr	r2, [pc, #72]	; (8000368 <SystemCoreClockUpdate+0xd4>)
 8000320:	6013      	str	r3, [r2, #0]
      break;
 8000322:	e00a      	b.n	800033a <SystemCoreClockUpdate+0xa6>
          SystemCoreClock = HSE_VALUE * pllmull;
 8000324:	68bb      	ldr	r3, [r7, #8]
 8000326:	4a11      	ldr	r2, [pc, #68]	; (800036c <SystemCoreClockUpdate+0xd8>)
 8000328:	fb02 f303 	mul.w	r3, r2, r3
 800032c:	4a0e      	ldr	r2, [pc, #56]	; (8000368 <SystemCoreClockUpdate+0xd4>)
 800032e:	6013      	str	r3, [r2, #0]
      break;
 8000330:	e003      	b.n	800033a <SystemCoreClockUpdate+0xa6>

    default:
      SystemCoreClock = HSI_VALUE;
 8000332:	4b0d      	ldr	r3, [pc, #52]	; (8000368 <SystemCoreClockUpdate+0xd4>)
 8000334:	4a0d      	ldr	r2, [pc, #52]	; (800036c <SystemCoreClockUpdate+0xd8>)
 8000336:	601a      	str	r2, [r3, #0]
      break;
 8000338:	bf00      	nop
  }
  
  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 800033a:	4b0a      	ldr	r3, [pc, #40]	; (8000364 <SystemCoreClockUpdate+0xd0>)
 800033c:	685b      	ldr	r3, [r3, #4]
 800033e:	091b      	lsrs	r3, r3, #4
 8000340:	f003 030f 	and.w	r3, r3, #15
 8000344:	4a0b      	ldr	r2, [pc, #44]	; (8000374 <SystemCoreClockUpdate+0xe0>)
 8000346:	5cd3      	ldrb	r3, [r2, r3]
 8000348:	b2db      	uxtb	r3, r3
 800034a:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;  
 800034c:	4b06      	ldr	r3, [pc, #24]	; (8000368 <SystemCoreClockUpdate+0xd4>)
 800034e:	681a      	ldr	r2, [r3, #0]
 8000350:	68fb      	ldr	r3, [r7, #12]
 8000352:	fa22 f303 	lsr.w	r3, r2, r3
 8000356:	4a04      	ldr	r2, [pc, #16]	; (8000368 <SystemCoreClockUpdate+0xd4>)
 8000358:	6013      	str	r3, [r2, #0]
}
 800035a:	bf00      	nop
 800035c:	3714      	adds	r7, #20
 800035e:	46bd      	mov	sp, r7
 8000360:	bc80      	pop	{r7}
 8000362:	4770      	bx	lr
 8000364:	40021000 	.word	0x40021000
 8000368:	20000000 	.word	0x20000000
 800036c:	007a1200 	.word	0x007a1200
 8000370:	003d0900 	.word	0x003d0900
 8000374:	20000004 	.word	0x20000004

08000378 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000378:	b580      	push	{r7, lr}
 800037a:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 800037c:	f000 f802 	bl	8000384 <SetSysClockTo72>
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 8000380:	bf00      	nop
 8000382:	bd80      	pop	{r7, pc}

08000384 <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 8000384:	b480      	push	{r7}
 8000386:	b083      	sub	sp, #12
 8000388:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800038a:	2300      	movs	r3, #0
 800038c:	607b      	str	r3, [r7, #4]
 800038e:	2300      	movs	r3, #0
 8000390:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8000392:	4b3a      	ldr	r3, [pc, #232]	; (800047c <SetSysClockTo72+0xf8>)
 8000394:	681b      	ldr	r3, [r3, #0]
 8000396:	4a39      	ldr	r2, [pc, #228]	; (800047c <SetSysClockTo72+0xf8>)
 8000398:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800039c:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800039e:	4b37      	ldr	r3, [pc, #220]	; (800047c <SetSysClockTo72+0xf8>)
 80003a0:	681b      	ldr	r3, [r3, #0]
 80003a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80003a6:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	3301      	adds	r3, #1
 80003ac:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80003ae:	683b      	ldr	r3, [r7, #0]
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	d103      	bne.n	80003bc <SetSysClockTo72+0x38>
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80003ba:	d1f0      	bne.n	800039e <SetSysClockTo72+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80003bc:	4b2f      	ldr	r3, [pc, #188]	; (800047c <SetSysClockTo72+0xf8>)
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d002      	beq.n	80003ce <SetSysClockTo72+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 80003c8:	2301      	movs	r3, #1
 80003ca:	603b      	str	r3, [r7, #0]
 80003cc:	e001      	b.n	80003d2 <SetSysClockTo72+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80003ce:	2300      	movs	r3, #0
 80003d0:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 80003d2:	683b      	ldr	r3, [r7, #0]
 80003d4:	2b01      	cmp	r3, #1
 80003d6:	d14b      	bne.n	8000470 <SetSysClockTo72+0xec>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 80003d8:	4b29      	ldr	r3, [pc, #164]	; (8000480 <SetSysClockTo72+0xfc>)
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	4a28      	ldr	r2, [pc, #160]	; (8000480 <SetSysClockTo72+0xfc>)
 80003de:	f043 0310 	orr.w	r3, r3, #16
 80003e2:	6013      	str	r3, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 80003e4:	4b26      	ldr	r3, [pc, #152]	; (8000480 <SetSysClockTo72+0xfc>)
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	4a25      	ldr	r2, [pc, #148]	; (8000480 <SetSysClockTo72+0xfc>)
 80003ea:	f023 0303 	bic.w	r3, r3, #3
 80003ee:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 80003f0:	4b23      	ldr	r3, [pc, #140]	; (8000480 <SetSysClockTo72+0xfc>)
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	4a22      	ldr	r2, [pc, #136]	; (8000480 <SetSysClockTo72+0xfc>)
 80003f6:	f043 0302 	orr.w	r3, r3, #2
 80003fa:	6013      	str	r3, [r2, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 80003fc:	4b1f      	ldr	r3, [pc, #124]	; (800047c <SetSysClockTo72+0xf8>)
 80003fe:	4a1f      	ldr	r2, [pc, #124]	; (800047c <SetSysClockTo72+0xf8>)
 8000400:	685b      	ldr	r3, [r3, #4]
 8000402:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8000404:	4b1d      	ldr	r3, [pc, #116]	; (800047c <SetSysClockTo72+0xf8>)
 8000406:	4a1d      	ldr	r2, [pc, #116]	; (800047c <SetSysClockTo72+0xf8>)
 8000408:	685b      	ldr	r3, [r3, #4]
 800040a:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 800040c:	4b1b      	ldr	r3, [pc, #108]	; (800047c <SetSysClockTo72+0xf8>)
 800040e:	685b      	ldr	r3, [r3, #4]
 8000410:	4a1a      	ldr	r2, [pc, #104]	; (800047c <SetSysClockTo72+0xf8>)
 8000412:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000416:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 8000418:	4b18      	ldr	r3, [pc, #96]	; (800047c <SetSysClockTo72+0xf8>)
 800041a:	685b      	ldr	r3, [r3, #4]
 800041c:	4a17      	ldr	r2, [pc, #92]	; (800047c <SetSysClockTo72+0xf8>)
 800041e:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8000422:	6053      	str	r3, [r2, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 8000424:	4b15      	ldr	r3, [pc, #84]	; (800047c <SetSysClockTo72+0xf8>)
 8000426:	685b      	ldr	r3, [r3, #4]
 8000428:	4a14      	ldr	r2, [pc, #80]	; (800047c <SetSysClockTo72+0xf8>)
 800042a:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 800042e:	6053      	str	r3, [r2, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8000430:	4b12      	ldr	r3, [pc, #72]	; (800047c <SetSysClockTo72+0xf8>)
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	4a11      	ldr	r2, [pc, #68]	; (800047c <SetSysClockTo72+0xf8>)
 8000436:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800043a:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800043c:	bf00      	nop
 800043e:	4b0f      	ldr	r3, [pc, #60]	; (800047c <SetSysClockTo72+0xf8>)
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000446:	2b00      	cmp	r3, #0
 8000448:	d0f9      	beq.n	800043e <SetSysClockTo72+0xba>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 800044a:	4b0c      	ldr	r3, [pc, #48]	; (800047c <SetSysClockTo72+0xf8>)
 800044c:	685b      	ldr	r3, [r3, #4]
 800044e:	4a0b      	ldr	r2, [pc, #44]	; (800047c <SetSysClockTo72+0xf8>)
 8000450:	f023 0303 	bic.w	r3, r3, #3
 8000454:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 8000456:	4b09      	ldr	r3, [pc, #36]	; (800047c <SetSysClockTo72+0xf8>)
 8000458:	685b      	ldr	r3, [r3, #4]
 800045a:	4a08      	ldr	r2, [pc, #32]	; (800047c <SetSysClockTo72+0xf8>)
 800045c:	f043 0302 	orr.w	r3, r3, #2
 8000460:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 8000462:	bf00      	nop
 8000464:	4b05      	ldr	r3, [pc, #20]	; (800047c <SetSysClockTo72+0xf8>)
 8000466:	685b      	ldr	r3, [r3, #4]
 8000468:	f003 030c 	and.w	r3, r3, #12
 800046c:	2b08      	cmp	r3, #8
 800046e:	d1f9      	bne.n	8000464 <SetSysClockTo72+0xe0>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
 8000470:	bf00      	nop
 8000472:	370c      	adds	r7, #12
 8000474:	46bd      	mov	sp, r7
 8000476:	bc80      	pop	{r7}
 8000478:	4770      	bx	lr
 800047a:	bf00      	nop
 800047c:	40021000 	.word	0x40021000
 8000480:	40022000 	.word	0x40022000

08000484 <systick_enable>:




void systick_enable(void)
{
 8000484:	b480      	push	{r7}
 8000486:	af00      	add	r7, sp, #0
	SET_SINGLE_BIT(SysTick->CTRL ,0) ;
 8000488:	4b04      	ldr	r3, [pc, #16]	; (800049c <systick_enable+0x18>)
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	4a03      	ldr	r2, [pc, #12]	; (800049c <systick_enable+0x18>)
 800048e:	f043 0301 	orr.w	r3, r3, #1
 8000492:	6013      	str	r3, [r2, #0]
}
 8000494:	bf00      	nop
 8000496:	46bd      	mov	sp, r7
 8000498:	bc80      	pop	{r7}
 800049a:	4770      	bx	lr
 800049c:	e000e010 	.word	0xe000e010

080004a0 <systick_disable>:



void systick_disable(void)
{
 80004a0:	b480      	push	{r7}
 80004a2:	af00      	add	r7, sp, #0
	CLEAR_SINGLE_BIT(SysTick->CTRL ,0) ;
 80004a4:	4b04      	ldr	r3, [pc, #16]	; (80004b8 <systick_disable+0x18>)
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	4a03      	ldr	r2, [pc, #12]	; (80004b8 <systick_disable+0x18>)
 80004aa:	f023 0301 	bic.w	r3, r3, #1
 80004ae:	6013      	str	r3, [r2, #0]
}
 80004b0:	bf00      	nop
 80004b2:	46bd      	mov	sp, r7
 80004b4:	bc80      	pop	{r7}
 80004b6:	4770      	bx	lr
 80004b8:	e000e010 	.word	0xe000e010

080004bc <systick_choose_clksrc>:


void systick_choose_clksrc(uint32_t clk_src)
{
 80004bc:	b480      	push	{r7}
 80004be:	b083      	sub	sp, #12
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	6078      	str	r0, [r7, #4]
	if (clk_src == SYSTICK_AHBCLK)
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	2b01      	cmp	r3, #1
 80004c8:	d106      	bne.n	80004d8 <systick_choose_clksrc+0x1c>
		SET_SINGLE_BIT(SysTick->CTRL ,2) ;
 80004ca:	4b09      	ldr	r3, [pc, #36]	; (80004f0 <systick_choose_clksrc+0x34>)
 80004cc:	681b      	ldr	r3, [r3, #0]
 80004ce:	4a08      	ldr	r2, [pc, #32]	; (80004f0 <systick_choose_clksrc+0x34>)
 80004d0:	f043 0304 	orr.w	r3, r3, #4
 80004d4:	6013      	str	r3, [r2, #0]
	
	else 
		CLEAR_SINGLE_BIT(SysTick->CTRL ,2) ;
}
 80004d6:	e005      	b.n	80004e4 <systick_choose_clksrc+0x28>
		CLEAR_SINGLE_BIT(SysTick->CTRL ,2) ;
 80004d8:	4b05      	ldr	r3, [pc, #20]	; (80004f0 <systick_choose_clksrc+0x34>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	4a04      	ldr	r2, [pc, #16]	; (80004f0 <systick_choose_clksrc+0x34>)
 80004de:	f023 0304 	bic.w	r3, r3, #4
 80004e2:	6013      	str	r3, [r2, #0]
}
 80004e4:	bf00      	nop
 80004e6:	370c      	adds	r7, #12
 80004e8:	46bd      	mov	sp, r7
 80004ea:	bc80      	pop	{r7}
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop
 80004f0:	e000e010 	.word	0xe000e010

080004f4 <systick_count_zero>:
/**
 * True : Has counted to zero
 * False :Not yet
 */ 
int systick_count_zero(void)
{
 80004f4:	b480      	push	{r7}
 80004f6:	af00      	add	r7, sp, #0
	return SysTick->CTRL & SysTick_CTRL_COUNTFLAG ;
 80004f8:	4b03      	ldr	r3, [pc, #12]	; (8000508 <systick_count_zero+0x14>)
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
 8000500:	4618      	mov	r0, r3
 8000502:	46bd      	mov	sp, r7
 8000504:	bc80      	pop	{r7}
 8000506:	4770      	bx	lr
 8000508:	e000e010 	.word	0xe000e010

0800050c <delay>:
 * (N + 1) = delay × clk = 0.001 sec × 72 MHz = 72,000
 * ==> N = 72,000 – 1 = 71999
 * 
 */ 
void delay(uint32_t us) 
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b084      	sub	sp, #16
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
	uint32_t load_val = (us * CLK_MHZ) - 1 ;
 8000514:	687a      	ldr	r2, [r7, #4]
 8000516:	4613      	mov	r3, r2
 8000518:	00db      	lsls	r3, r3, #3
 800051a:	4413      	add	r3, r2
 800051c:	00db      	lsls	r3, r3, #3
 800051e:	3b01      	subs	r3, #1
 8000520:	60fb      	str	r3, [r7, #12]

	SysTick->LOAD = load_val ;
 8000522:	4a0a      	ldr	r2, [pc, #40]	; (800054c <delay+0x40>)
 8000524:	68fb      	ldr	r3, [r7, #12]
 8000526:	6053      	str	r3, [r2, #4]
	systick_choose_clksrc(SYSTICK_AHBCLK) ;
 8000528:	2001      	movs	r0, #1
 800052a:	f7ff ffc7 	bl	80004bc <systick_choose_clksrc>
	systick_enable() ;
 800052e:	f7ff ffa9 	bl	8000484 <systick_enable>

	while(systick_count_zero() == FALSE) ;
 8000532:	bf00      	nop
 8000534:	f7ff ffde 	bl	80004f4 <systick_count_zero>
 8000538:	4603      	mov	r3, r0
 800053a:	2b00      	cmp	r3, #0
 800053c:	d0fa      	beq.n	8000534 <delay+0x28>

	systick_disable() ;
 800053e:	f7ff ffaf 	bl	80004a0 <systick_disable>
}
 8000542:	bf00      	nop
 8000544:	3710      	adds	r7, #16
 8000546:	46bd      	mov	sp, r7
 8000548:	bd80      	pop	{r7, pc}
 800054a:	bf00      	nop
 800054c:	e000e010 	.word	0xe000e010

08000550 <systick_int_enable>:

void systick_int_enable(void)
{
 8000550:	b480      	push	{r7}
 8000552:	af00      	add	r7, sp, #0
	SET_SINGLE_BIT(SysTick->CTRL ,1) ;
 8000554:	4b04      	ldr	r3, [pc, #16]	; (8000568 <systick_int_enable+0x18>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	4a03      	ldr	r2, [pc, #12]	; (8000568 <systick_int_enable+0x18>)
 800055a:	f043 0302 	orr.w	r3, r3, #2
 800055e:	6013      	str	r3, [r2, #0]
}
 8000560:	bf00      	nop
 8000562:	46bd      	mov	sp, r7
 8000564:	bc80      	pop	{r7}
 8000566:	4770      	bx	lr
 8000568:	e000e010 	.word	0xe000e010

0800056c <systick_int_disable>:


void systick_int_disable(void)
{
 800056c:	b480      	push	{r7}
 800056e:	af00      	add	r7, sp, #0
	CLEAR_SINGLE_BIT(SysTick->CTRL ,1) ;
 8000570:	4b04      	ldr	r3, [pc, #16]	; (8000584 <systick_int_disable+0x18>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	4a03      	ldr	r2, [pc, #12]	; (8000584 <systick_int_disable+0x18>)
 8000576:	f023 0302 	bic.w	r3, r3, #2
 800057a:	6013      	str	r3, [r2, #0]
}
 800057c:	bf00      	nop
 800057e:	46bd      	mov	sp, r7
 8000580:	bc80      	pop	{r7}
 8000582:	4770      	bx	lr
 8000584:	e000e010 	.word	0xe000e010

08000588 <systick_int_init>:


void systick_int_init(uint32_t slice_us)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b084      	sub	sp, #16
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
	uint32_t load_val = (slice_us * CLK_MHZ) - 1 ;
 8000590:	687a      	ldr	r2, [r7, #4]
 8000592:	4613      	mov	r3, r2
 8000594:	00db      	lsls	r3, r3, #3
 8000596:	4413      	add	r3, r2
 8000598:	00db      	lsls	r3, r3, #3
 800059a:	3b01      	subs	r3, #1
 800059c:	60fb      	str	r3, [r7, #12]

	SysTick->LOAD = load_val ;
 800059e:	4a07      	ldr	r2, [pc, #28]	; (80005bc <systick_int_init+0x34>)
 80005a0:	68fb      	ldr	r3, [r7, #12]
 80005a2:	6053      	str	r3, [r2, #4]

	systick_choose_clksrc(SYSTICK_AHBCLK) ;
 80005a4:	2001      	movs	r0, #1
 80005a6:	f7ff ff89 	bl	80004bc <systick_choose_clksrc>
	systick_enable() ;
 80005aa:	f7ff ff6b 	bl	8000484 <systick_enable>
	systick_int_enable() ;
 80005ae:	f7ff ffcf 	bl	8000550 <systick_int_enable>
}
 80005b2:	bf00      	nop
 80005b4:	3710      	adds	r7, #16
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	e000e010 	.word	0xe000e010

080005c0 <SysTick_Handler>:
#include "../driver/usart.h"



void SysTick_Handler(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
	usart_send_str("Hello World!\n\0");
 80005c4:	4802      	ldr	r0, [pc, #8]	; (80005d0 <SysTick_Handler+0x10>)
 80005c6:	f000 f805 	bl	80005d4 <usart_send_str>
}
 80005ca:	bf00      	nop
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	080007b8 	.word	0x080007b8

080005d4 <usart_send_str>:
#include "usart.h"
#include "gpio.h"
#include "../lib/common.h"

void usart_send_str(char *s)
{
 80005d4:	b480      	push	{r7}
 80005d6:	b083      	sub	sp, #12
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
	while (*s) {
 80005dc:	e00f      	b.n	80005fe <usart_send_str+0x2a>
		while (!((USART2->SR) & USART_SR_TXE));
 80005de:	bf00      	nop
 80005e0:	4b0c      	ldr	r3, [pc, #48]	; (8000614 <usart_send_str+0x40>)
 80005e2:	881b      	ldrh	r3, [r3, #0]
 80005e4:	b29b      	uxth	r3, r3
 80005e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d0f8      	beq.n	80005e0 <usart_send_str+0xc>

		USART2->DR = *s;
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	781a      	ldrb	r2, [r3, #0]
 80005f2:	4b08      	ldr	r3, [pc, #32]	; (8000614 <usart_send_str+0x40>)
 80005f4:	b292      	uxth	r2, r2
 80005f6:	809a      	strh	r2, [r3, #4]

		s++ ;
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	3301      	adds	r3, #1
 80005fc:	607b      	str	r3, [r7, #4]
	while (*s) {
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	2b00      	cmp	r3, #0
 8000604:	d1eb      	bne.n	80005de <usart_send_str+0xa>
	}
}
 8000606:	bf00      	nop
 8000608:	bf00      	nop
 800060a:	370c      	adds	r7, #12
 800060c:	46bd      	mov	sp, r7
 800060e:	bc80      	pop	{r7}
 8000610:	4770      	bx	lr
 8000612:	bf00      	nop
 8000614:	40004400 	.word	0x40004400

08000618 <usart_clk_enable>:


void usart_clk_enable(void)
{
 8000618:	b480      	push	{r7}
 800061a:	af00      	add	r7, sp, #0
	SET_BIT(RCC->APB2ENR ,RCC_APB2ENR_USART1EN) ;
 800061c:	4b07      	ldr	r3, [pc, #28]	; (800063c <usart_clk_enable+0x24>)
 800061e:	699b      	ldr	r3, [r3, #24]
 8000620:	4a06      	ldr	r2, [pc, #24]	; (800063c <usart_clk_enable+0x24>)
 8000622:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000626:	6193      	str	r3, [r2, #24]
	SET_BIT(RCC->APB1ENR ,RCC_APB1ENR_USART2EN) ;
 8000628:	4b04      	ldr	r3, [pc, #16]	; (800063c <usart_clk_enable+0x24>)
 800062a:	69db      	ldr	r3, [r3, #28]
 800062c:	4a03      	ldr	r2, [pc, #12]	; (800063c <usart_clk_enable+0x24>)
 800062e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000632:	61d3      	str	r3, [r2, #28]
	//SET_BIT(RCC->APB1ENR ,RCC_APB1ENR_USART3EN) ; // Enable USART3 ,qemu failed but success at keil
}
 8000634:	bf00      	nop
 8000636:	46bd      	mov	sp, r7
 8000638:	bc80      	pop	{r7}
 800063a:	4770      	bx	lr
 800063c:	40021000 	.word	0x40021000

08000640 <config_gpio_for_usart>:
 * USART3	TX----PB10
 * 			RX----PB11
 * 
 */ 
int config_gpio_for_usart(USART_TypeDef * usartx)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b082      	sub	sp, #8
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
	if (usartx == USART1) {
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	4a2a      	ldr	r2, [pc, #168]	; (80006f4 <config_gpio_for_usart+0xb4>)
 800064c:	4293      	cmp	r3, r2
 800064e:	d115      	bne.n	800067c <config_gpio_for_usart+0x3c>
		//Pull-up PA10 for USART1 ,GPIOA->ODR |= (1 << 10) ;	
		SET_SINGLE_BIT(GPIOA->ODR ,10) ;
 8000650:	4b29      	ldr	r3, [pc, #164]	; (80006f8 <config_gpio_for_usart+0xb8>)
 8000652:	68db      	ldr	r3, [r3, #12]
 8000654:	4a28      	ldr	r2, [pc, #160]	; (80006f8 <config_gpio_for_usart+0xb8>)
 8000656:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800065a:	60d3      	str	r3, [r2, #12]

		// Config GPIO for USART1
		config_gpio_mode_bits(GPIOA ,9 ,MODE_OUTPUT_50M) ;
 800065c:	220b      	movs	r2, #11
 800065e:	2109      	movs	r1, #9
 8000660:	4825      	ldr	r0, [pc, #148]	; (80006f8 <config_gpio_for_usart+0xb8>)
 8000662:	f7ff fd73 	bl	800014c <config_gpio_mode_bits>
		config_gpio_cnf_bits(GPIOA ,9 ,ALT_OUT_PUSHPULL) ;
 8000666:	220a      	movs	r2, #10
 8000668:	2109      	movs	r1, #9
 800066a:	4823      	ldr	r0, [pc, #140]	; (80006f8 <config_gpio_for_usart+0xb8>)
 800066c:	f7ff fd9c 	bl	80001a8 <config_gpio_cnf_bits>
		config_gpio_mode_bits(GPIOA ,10 ,MODE_INPUT) ;
 8000670:	2200      	movs	r2, #0
 8000672:	210a      	movs	r1, #10
 8000674:	4820      	ldr	r0, [pc, #128]	; (80006f8 <config_gpio_for_usart+0xb8>)
 8000676:	f7ff fd69 	bl	800014c <config_gpio_mode_bits>
 800067a:	e036      	b.n	80006ea <config_gpio_for_usart+0xaa>

	} else if (usartx == USART2) {
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	4a1f      	ldr	r2, [pc, #124]	; (80006fc <config_gpio_for_usart+0xbc>)
 8000680:	4293      	cmp	r3, r2
 8000682:	d115      	bne.n	80006b0 <config_gpio_for_usart+0x70>
		//Pull-up PA3 for USART2 ,GPIOA->ODR |= (1 << 3) ;	
		SET_SINGLE_BIT(GPIOA->ODR ,3) ;
 8000684:	4b1c      	ldr	r3, [pc, #112]	; (80006f8 <config_gpio_for_usart+0xb8>)
 8000686:	68db      	ldr	r3, [r3, #12]
 8000688:	4a1b      	ldr	r2, [pc, #108]	; (80006f8 <config_gpio_for_usart+0xb8>)
 800068a:	f043 0308 	orr.w	r3, r3, #8
 800068e:	60d3      	str	r3, [r2, #12]

		//Config GPIO for USART2
		config_gpio_mode_bits(GPIOA ,2 ,MODE_OUTPUT_50M) ;
 8000690:	220b      	movs	r2, #11
 8000692:	2102      	movs	r1, #2
 8000694:	4818      	ldr	r0, [pc, #96]	; (80006f8 <config_gpio_for_usart+0xb8>)
 8000696:	f7ff fd59 	bl	800014c <config_gpio_mode_bits>
		config_gpio_cnf_bits(GPIOA ,2 ,ALT_OUT_PUSHPULL) ;
 800069a:	220a      	movs	r2, #10
 800069c:	2102      	movs	r1, #2
 800069e:	4816      	ldr	r0, [pc, #88]	; (80006f8 <config_gpio_for_usart+0xb8>)
 80006a0:	f7ff fd82 	bl	80001a8 <config_gpio_cnf_bits>
		config_gpio_mode_bits(GPIOA ,3 ,MODE_INPUT) ;
 80006a4:	2200      	movs	r2, #0
 80006a6:	2103      	movs	r1, #3
 80006a8:	4813      	ldr	r0, [pc, #76]	; (80006f8 <config_gpio_for_usart+0xb8>)
 80006aa:	f7ff fd4f 	bl	800014c <config_gpio_mode_bits>
 80006ae:	e01c      	b.n	80006ea <config_gpio_for_usart+0xaa>

	} else if (usartx == USART3) {
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	4a13      	ldr	r2, [pc, #76]	; (8000700 <config_gpio_for_usart+0xc0>)
 80006b4:	4293      	cmp	r3, r2
 80006b6:	d115      	bne.n	80006e4 <config_gpio_for_usart+0xa4>
		//Pull-up PB11 for USART3 ,GPIOB->ODR |= (1 << 11) ;	
		SET_SINGLE_BIT(GPIOB->ODR ,11) ;
 80006b8:	4b12      	ldr	r3, [pc, #72]	; (8000704 <config_gpio_for_usart+0xc4>)
 80006ba:	68db      	ldr	r3, [r3, #12]
 80006bc:	4a11      	ldr	r2, [pc, #68]	; (8000704 <config_gpio_for_usart+0xc4>)
 80006be:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80006c2:	60d3      	str	r3, [r2, #12]

		//Config GPIO for USART3
		config_gpio_mode_bits(GPIOB ,10 ,MODE_OUTPUT_50M) ;
 80006c4:	220b      	movs	r2, #11
 80006c6:	210a      	movs	r1, #10
 80006c8:	480e      	ldr	r0, [pc, #56]	; (8000704 <config_gpio_for_usart+0xc4>)
 80006ca:	f7ff fd3f 	bl	800014c <config_gpio_mode_bits>
		config_gpio_cnf_bits(GPIOB ,10 ,ALT_OUT_PUSHPULL) ;
 80006ce:	220a      	movs	r2, #10
 80006d0:	210a      	movs	r1, #10
 80006d2:	480c      	ldr	r0, [pc, #48]	; (8000704 <config_gpio_for_usart+0xc4>)
 80006d4:	f7ff fd68 	bl	80001a8 <config_gpio_cnf_bits>
		config_gpio_mode_bits(GPIOB ,11 ,MODE_INPUT) ;
 80006d8:	2200      	movs	r2, #0
 80006da:	210b      	movs	r1, #11
 80006dc:	4809      	ldr	r0, [pc, #36]	; (8000704 <config_gpio_for_usart+0xc4>)
 80006de:	f7ff fd35 	bl	800014c <config_gpio_mode_bits>
 80006e2:	e002      	b.n	80006ea <config_gpio_for_usart+0xaa>

	} else {
		return -1 ;
 80006e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80006e8:	e000      	b.n	80006ec <config_gpio_for_usart+0xac>
	}

	return 0 ;
 80006ea:	2300      	movs	r3, #0

}
 80006ec:	4618      	mov	r0, r3
 80006ee:	3708      	adds	r7, #8
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	40013800 	.word	0x40013800
 80006f8:	40010800 	.word	0x40010800
 80006fc:	40004400 	.word	0x40004400
 8000700:	40004800 	.word	0x40004800
 8000704:	40010c00 	.word	0x40010c00

08000708 <usart_init>:


void usart_init(USART_TypeDef * usartx)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
	gpio_clk_enable() ;	// Enable clks for GPIOA and GPIOB
 8000710:	f7ff fd08 	bl	8000124 <gpio_clk_enable>
	config_gpio_for_usart(usartx) ;	//Config GPIO for USARTx
 8000714:	6878      	ldr	r0, [r7, #4]
 8000716:	f7ff ff93 	bl	8000640 <config_gpio_for_usart>
	
	usart_clk_enable() ;
 800071a:	f7ff ff7d 	bl	8000618 <usart_clk_enable>

	// Enable USART
	usart_enable(usartx) ;
 800071e:	6878      	ldr	r0, [r7, #4]
 8000720:	f000 f804 	bl	800072c <usart_enable>
}
 8000724:	bf00      	nop
 8000726:	3708      	adds	r7, #8
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}

0800072c <usart_enable>:


void usart_enable(USART_TypeDef * usartx)
{
 800072c:	b480      	push	{r7}
 800072e:	b083      	sub	sp, #12
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
	// Enable Receiver
	SET_SINGLE_BIT(usartx->CR1 ,2) ;
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	899b      	ldrh	r3, [r3, #12]
 8000738:	b29b      	uxth	r3, r3
 800073a:	f043 0304 	orr.w	r3, r3, #4
 800073e:	b29a      	uxth	r2, r3
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	819a      	strh	r2, [r3, #12]

	// Enable Transmitter
	SET_SINGLE_BIT(usartx->CR1 ,3) ;
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	899b      	ldrh	r3, [r3, #12]
 8000748:	b29b      	uxth	r3, r3
 800074a:	f043 0308 	orr.w	r3, r3, #8
 800074e:	b29a      	uxth	r2, r3
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	819a      	strh	r2, [r3, #12]

	//Enable USART
	SET_SINGLE_BIT(usartx->CR1 ,13) ;
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	899b      	ldrh	r3, [r3, #12]
 8000758:	b29b      	uxth	r3, r3
 800075a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800075e:	b29a      	uxth	r2, r3
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	819a      	strh	r2, [r3, #12]
}
 8000764:	bf00      	nop
 8000766:	370c      	adds	r7, #12
 8000768:	46bd      	mov	sp, r7
 800076a:	bc80      	pop	{r7}
 800076c:	4770      	bx	lr
 800076e:	bf00      	nop

08000770 <Reset_Handler>:
 8000770:	2100      	movs	r1, #0
 8000772:	e003      	b.n	800077c <LoopCopyDataInit>

08000774 <CopyDataInit>:
 8000774:	4b0a      	ldr	r3, [pc, #40]	; (80007a0 <LoopFillZerobss+0x10>)
 8000776:	585b      	ldr	r3, [r3, r1]
 8000778:	5043      	str	r3, [r0, r1]
 800077a:	3104      	adds	r1, #4

0800077c <LoopCopyDataInit>:
 800077c:	4809      	ldr	r0, [pc, #36]	; (80007a4 <LoopFillZerobss+0x14>)
 800077e:	4b0a      	ldr	r3, [pc, #40]	; (80007a8 <LoopFillZerobss+0x18>)
 8000780:	1842      	adds	r2, r0, r1
 8000782:	429a      	cmp	r2, r3
 8000784:	d3f6      	bcc.n	8000774 <CopyDataInit>
 8000786:	4a09      	ldr	r2, [pc, #36]	; (80007ac <LoopFillZerobss+0x1c>)
 8000788:	e002      	b.n	8000790 <LoopFillZerobss>

0800078a <FillZerobss>:
 800078a:	2300      	movs	r3, #0
 800078c:	f842 3b04 	str.w	r3, [r2], #4

08000790 <LoopFillZerobss>:
 8000790:	4b07      	ldr	r3, [pc, #28]	; (80007b0 <LoopFillZerobss+0x20>)
 8000792:	429a      	cmp	r2, r3
 8000794:	d3f9      	bcc.n	800078a <FillZerobss>
 8000796:	f7ff fd49 	bl	800022c <SystemInit>
 800079a:	f7ff fcb7 	bl	800010c <main>
 800079e:	4770      	bx	lr
 80007a0:	080007c7 	.word	0x080007c7
 80007a4:	20000000 	.word	0x20000000
 80007a8:	20000014 	.word	0x20000014
 80007ac:	20000014 	.word	0x20000014
 80007b0:	20000014 	.word	0x20000014

080007b4 <ADC1_2_IRQHandler>:
 80007b4:	e7fe      	b.n	80007b4 <ADC1_2_IRQHandler>
 80007b6:	0000      	movs	r0, r0
 80007b8:	6c6c6548 	.word	0x6c6c6548
 80007bc:	6f57206f 	.word	0x6f57206f
 80007c0:	21646c72 	.word	0x21646c72
 80007c4:	000a      	.short	0x000a
	...
