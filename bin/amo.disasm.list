
../bin/amo.elf:     file format elf32-littlearm


Disassembly of section .text:

08000000 <g_pfnVectors>:
 8000000:	00 50 00 20 0d 06 00 08 51 06 00 08 51 06 00 08     .P. ....Q...Q...
 8000010:	51 06 00 08 51 06 00 08 51 06 00 08 00 00 00 00     Q...Q...Q.......
	...
 800002c:	51 06 00 08 51 06 00 08 00 00 00 00 51 06 00 08     Q...Q.......Q...
 800003c:	51 06 00 08 51 06 00 08 51 06 00 08 51 06 00 08     Q...Q...Q...Q...
 800004c:	51 06 00 08 51 06 00 08 51 06 00 08 51 06 00 08     Q...Q...Q...Q...
 800005c:	51 06 00 08 51 06 00 08 51 06 00 08 51 06 00 08     Q...Q...Q...Q...
 800006c:	51 06 00 08 51 06 00 08 51 06 00 08 51 06 00 08     Q...Q...Q...Q...
 800007c:	51 06 00 08 51 06 00 08 51 06 00 08 51 06 00 08     Q...Q...Q...Q...
 800008c:	51 06 00 08 51 06 00 08 51 06 00 08 51 06 00 08     Q...Q...Q...Q...
 800009c:	51 06 00 08 51 06 00 08 51 06 00 08 51 06 00 08     Q...Q...Q...Q...
 80000ac:	51 06 00 08 51 06 00 08 51 06 00 08 51 06 00 08     Q...Q...Q...Q...
 80000bc:	51 06 00 08 51 06 00 08 51 06 00 08 51 06 00 08     Q...Q...Q...Q...
 80000cc:	51 06 00 08 51 06 00 08 51 06 00 08 51 06 00 08     Q...Q...Q...Q...
 80000dc:	51 06 00 08 51 06 00 08 51 06 00 08 51 06 00 08     Q...Q...Q...Q...
	...
 8000108:	5f f8 08 f1                                         _...

0800010c <main>:
#include "../driver/usart.h"
#include "../lib/common.h"


void main(void)
{
 800010c:	b580      	push	{r7, lr}
 800010e:	af00      	add	r7, sp, #0
    usart_init(CONSOLE_PTR) ;
 8000110:	480f      	ldr	r0, [pc, #60]	; (8000150 <main+0x44>)
 8000112:	f000 fa6b 	bl	80005ec <usart_init>
    
	SET_SINGLE_BIT(USART2->CR1 ,2) ;
 8000116:	4b0e      	ldr	r3, [pc, #56]	; (8000150 <main+0x44>)
 8000118:	899b      	ldrh	r3, [r3, #12]
 800011a:	b29b      	uxth	r3, r3
 800011c:	4a0c      	ldr	r2, [pc, #48]	; (8000150 <main+0x44>)
 800011e:	f043 0304 	orr.w	r3, r3, #4
 8000122:	b29b      	uxth	r3, r3
 8000124:	8193      	strh	r3, [r2, #12]
	SET_SINGLE_BIT(USART2->CR1 ,3) ;
 8000126:	4b0a      	ldr	r3, [pc, #40]	; (8000150 <main+0x44>)
 8000128:	899b      	ldrh	r3, [r3, #12]
 800012a:	b29b      	uxth	r3, r3
 800012c:	4a08      	ldr	r2, [pc, #32]	; (8000150 <main+0x44>)
 800012e:	f043 0308 	orr.w	r3, r3, #8
 8000132:	b29b      	uxth	r3, r3
 8000134:	8193      	strh	r3, [r2, #12]
	SET_SINGLE_BIT(USART2->CR1 ,13) ;
 8000136:	4b06      	ldr	r3, [pc, #24]	; (8000150 <main+0x44>)
 8000138:	899b      	ldrh	r3, [r3, #12]
 800013a:	b29b      	uxth	r3, r3
 800013c:	4a04      	ldr	r2, [pc, #16]	; (8000150 <main+0x44>)
 800013e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000142:	b29b      	uxth	r3, r3
 8000144:	8193      	strh	r3, [r2, #12]

	usart_send_str("Hello World!\n\0");
 8000146:	4803      	ldr	r0, [pc, #12]	; (8000154 <main+0x48>)
 8000148:	f000 f9b6 	bl	80004b8 <usart_send_str>

	while (1);
 800014c:	e7fe      	b.n	800014c <main+0x40>
 800014e:	bf00      	nop
 8000150:	40004400 	.word	0x40004400
 8000154:	08000654 	.word	0x08000654

08000158 <gpio_clk_enable>:
#include "gpio.h"
#include "../lib/common.h"


void gpio_clk_enable(void)
{
 8000158:	b480      	push	{r7}
 800015a:	af00      	add	r7, sp, #0
	// Enable the clocks for GPIOA ports  ,RCC->APB2ENR |= RCC_APB2ENR_IOPAEN ;	
	// Enable the clks for GPIOB ,RCC->APB2ENR |= RCC_APB2ENR_IOPBEN ;	
	SET_BIT(RCC->APB2ENR ,RCC_APB2ENR_IOPAEN) ;
 800015c:	4b07      	ldr	r3, [pc, #28]	; (800017c <gpio_clk_enable+0x24>)
 800015e:	699b      	ldr	r3, [r3, #24]
 8000160:	4a06      	ldr	r2, [pc, #24]	; (800017c <gpio_clk_enable+0x24>)
 8000162:	f043 0304 	orr.w	r3, r3, #4
 8000166:	6193      	str	r3, [r2, #24]
	SET_BIT(RCC->APB2ENR ,RCC_APB2ENR_IOPBEN) ;
 8000168:	4b04      	ldr	r3, [pc, #16]	; (800017c <gpio_clk_enable+0x24>)
 800016a:	699b      	ldr	r3, [r3, #24]
 800016c:	4a03      	ldr	r2, [pc, #12]	; (800017c <gpio_clk_enable+0x24>)
 800016e:	f043 0308 	orr.w	r3, r3, #8
 8000172:	6193      	str	r3, [r2, #24]
}
 8000174:	bf00      	nop
 8000176:	46bd      	mov	sp, r7
 8000178:	bc80      	pop	{r7}
 800017a:	4770      	bx	lr
 800017c:	40021000 	.word	0x40021000

08000180 <config_gpio_mode>:


int config_gpio_mode(GPIO_TypeDef * GPIOx ,uint8_t pin ,uint8_t mode_bits)
{
 8000180:	b480      	push	{r7}
 8000182:	b083      	sub	sp, #12
 8000184:	af00      	add	r7, sp, #0
 8000186:	6078      	str	r0, [r7, #4]
 8000188:	460b      	mov	r3, r1
 800018a:	70fb      	strb	r3, [r7, #3]
 800018c:	4613      	mov	r3, r2
 800018e:	70bb      	strb	r3, [r7, #2]
	if (pin <= 7) {
 8000190:	78fb      	ldrb	r3, [r7, #3]
 8000192:	2b07      	cmp	r3, #7
 8000194:	d80a      	bhi.n	80001ac <config_gpio_mode+0x2c>
		GPIOx->CRL |= (mode_bits << (4 * pin)) ;
 8000196:	687b      	ldr	r3, [r7, #4]
 8000198:	681b      	ldr	r3, [r3, #0]
 800019a:	78b9      	ldrb	r1, [r7, #2]
 800019c:	78fa      	ldrb	r2, [r7, #3]
 800019e:	0092      	lsls	r2, r2, #2
 80001a0:	fa01 f202 	lsl.w	r2, r1, r2
 80001a4:	431a      	orrs	r2, r3
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	601a      	str	r2, [r3, #0]
 80001aa:	e011      	b.n	80001d0 <config_gpio_mode+0x50>

	} else if (pin <= 15) {
 80001ac:	78fb      	ldrb	r3, [r7, #3]
 80001ae:	2b0f      	cmp	r3, #15
 80001b0:	d80b      	bhi.n	80001ca <config_gpio_mode+0x4a>
		GPIOx->CRH |= (mode_bits << (4 * (pin - 7))) ;
 80001b2:	687b      	ldr	r3, [r7, #4]
 80001b4:	685b      	ldr	r3, [r3, #4]
 80001b6:	78b9      	ldrb	r1, [r7, #2]
 80001b8:	78fa      	ldrb	r2, [r7, #3]
 80001ba:	3a07      	subs	r2, #7
 80001bc:	0092      	lsls	r2, r2, #2
 80001be:	fa01 f202 	lsl.w	r2, r1, r2
 80001c2:	431a      	orrs	r2, r3
 80001c4:	687b      	ldr	r3, [r7, #4]
 80001c6:	605a      	str	r2, [r3, #4]
 80001c8:	e002      	b.n	80001d0 <config_gpio_mode+0x50>

	} else {
		return -1 ;
 80001ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80001ce:	e000      	b.n	80001d2 <config_gpio_mode+0x52>
	}

	return 0 ;
 80001d0:	2300      	movs	r3, #0
}
 80001d2:	4618      	mov	r0, r3
 80001d4:	370c      	adds	r7, #12
 80001d6:	46bd      	mov	sp, r7
 80001d8:	bc80      	pop	{r7}
 80001da:	4770      	bx	lr

080001dc <config_gpio_cnf>:


int config_gpio_cnf(GPIO_TypeDef * GPIOx ,uint8_t pin ,uint8_t cnf_bits)
{
 80001dc:	b480      	push	{r7}
 80001de:	b085      	sub	sp, #20
 80001e0:	af00      	add	r7, sp, #0
 80001e2:	6078      	str	r0, [r7, #4]
 80001e4:	460b      	mov	r3, r1
 80001e6:	70fb      	strb	r3, [r7, #3]
 80001e8:	4613      	mov	r3, r2
 80001ea:	70bb      	strb	r3, [r7, #2]
	uint8_t bit_shift ;

	if (pin <= 7) {
 80001ec:	78fb      	ldrb	r3, [r7, #3]
 80001ee:	2b07      	cmp	r3, #7
 80001f0:	d80e      	bhi.n	8000210 <config_gpio_cnf+0x34>
		bit_shift = (4 * pin) + 2 ;
 80001f2:	78fb      	ldrb	r3, [r7, #3]
 80001f4:	009b      	lsls	r3, r3, #2
 80001f6:	b2db      	uxtb	r3, r3
 80001f8:	3302      	adds	r3, #2
 80001fa:	73fb      	strb	r3, [r7, #15]
		GPIOx->CRL |= (cnf_bits << bit_shift) ;
 80001fc:	687b      	ldr	r3, [r7, #4]
 80001fe:	681b      	ldr	r3, [r3, #0]
 8000200:	78b9      	ldrb	r1, [r7, #2]
 8000202:	7bfa      	ldrb	r2, [r7, #15]
 8000204:	fa01 f202 	lsl.w	r2, r1, r2
 8000208:	431a      	orrs	r2, r3
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	601a      	str	r2, [r3, #0]
 800020e:	e016      	b.n	800023e <config_gpio_cnf+0x62>

	} else if (pin <= 15) {
 8000210:	78fb      	ldrb	r3, [r7, #3]
 8000212:	2b0f      	cmp	r3, #15
 8000214:	d810      	bhi.n	8000238 <config_gpio_cnf+0x5c>
		bit_shift = (4 * (pin - 7)) + 2 ;
 8000216:	78fb      	ldrb	r3, [r7, #3]
 8000218:	3b07      	subs	r3, #7
 800021a:	b2db      	uxtb	r3, r3
 800021c:	009b      	lsls	r3, r3, #2
 800021e:	b2db      	uxtb	r3, r3
 8000220:	3302      	adds	r3, #2
 8000222:	73fb      	strb	r3, [r7, #15]
		GPIOx->CRH |= (cnf_bits << bit_shift) ;
 8000224:	687b      	ldr	r3, [r7, #4]
 8000226:	685b      	ldr	r3, [r3, #4]
 8000228:	78b9      	ldrb	r1, [r7, #2]
 800022a:	7bfa      	ldrb	r2, [r7, #15]
 800022c:	fa01 f202 	lsl.w	r2, r1, r2
 8000230:	431a      	orrs	r2, r3
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	605a      	str	r2, [r3, #4]
 8000236:	e002      	b.n	800023e <config_gpio_cnf+0x62>

	} else {
		return -1 ;
 8000238:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800023c:	e000      	b.n	8000240 <config_gpio_cnf+0x64>
	}

	return 0 ;
 800023e:	2300      	movs	r3, #0
}
 8000240:	4618      	mov	r0, r3
 8000242:	3714      	adds	r7, #20
 8000244:	46bd      	mov	sp, r7
 8000246:	bc80      	pop	{r7}
 8000248:	4770      	bx	lr
 800024a:	bf00      	nop
 800024c:	08000663 	.word	0x08000663
 8000250:	20000000 	.word	0x20000000
 8000254:	20000014 	.word	0x20000014
 8000258:	20000014 	.word	0x20000014
 800025c:	20000014 	.word	0x20000014

08000260 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000260:	b580      	push	{r7, lr}
 8000262:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000264:	4b15      	ldr	r3, [pc, #84]	; (80002bc <SystemInit+0x5c>)
 8000266:	681b      	ldr	r3, [r3, #0]
 8000268:	4a14      	ldr	r2, [pc, #80]	; (80002bc <SystemInit+0x5c>)
 800026a:	f043 0301 	orr.w	r3, r3, #1
 800026e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8000270:	4b12      	ldr	r3, [pc, #72]	; (80002bc <SystemInit+0x5c>)
 8000272:	685a      	ldr	r2, [r3, #4]
 8000274:	4911      	ldr	r1, [pc, #68]	; (80002bc <SystemInit+0x5c>)
 8000276:	4b12      	ldr	r3, [pc, #72]	; (80002c0 <SystemInit+0x60>)
 8000278:	4013      	ands	r3, r2
 800027a:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800027c:	4b0f      	ldr	r3, [pc, #60]	; (80002bc <SystemInit+0x5c>)
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	4a0e      	ldr	r2, [pc, #56]	; (80002bc <SystemInit+0x5c>)
 8000282:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000286:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800028a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800028c:	4b0b      	ldr	r3, [pc, #44]	; (80002bc <SystemInit+0x5c>)
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	4a0a      	ldr	r2, [pc, #40]	; (80002bc <SystemInit+0x5c>)
 8000292:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000296:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8000298:	4b08      	ldr	r3, [pc, #32]	; (80002bc <SystemInit+0x5c>)
 800029a:	685b      	ldr	r3, [r3, #4]
 800029c:	4a07      	ldr	r2, [pc, #28]	; (80002bc <SystemInit+0x5c>)
 800029e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80002a2:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 80002a4:	4b05      	ldr	r3, [pc, #20]	; (80002bc <SystemInit+0x5c>)
 80002a6:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80002aa:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 80002ac:	f000 f87e 	bl	80003ac <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80002b0:	4b04      	ldr	r3, [pc, #16]	; (80002c4 <SystemInit+0x64>)
 80002b2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80002b6:	609a      	str	r2, [r3, #8]
#endif 
}
 80002b8:	bf00      	nop
 80002ba:	bd80      	pop	{r7, pc}
 80002bc:	40021000 	.word	0x40021000
 80002c0:	f8ff0000 	.word	0xf8ff0000
 80002c4:	e000ed00 	.word	0xe000ed00

080002c8 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
 80002c8:	b480      	push	{r7}
 80002ca:	b085      	sub	sp, #20
 80002cc:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllmull = 0, pllsource = 0;
 80002ce:	2300      	movs	r3, #0
 80002d0:	60fb      	str	r3, [r7, #12]
 80002d2:	2300      	movs	r3, #0
 80002d4:	60bb      	str	r3, [r7, #8]
 80002d6:	2300      	movs	r3, #0
 80002d8:	607b      	str	r3, [r7, #4]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || (defined STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif /* STM32F10X_LD_VL or STM32F10X_MD_VL or STM32F10X_HD_VL */
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80002da:	4b2f      	ldr	r3, [pc, #188]	; (8000398 <SystemCoreClockUpdate+0xd0>)
 80002dc:	685b      	ldr	r3, [r3, #4]
 80002de:	f003 030c 	and.w	r3, r3, #12
 80002e2:	60fb      	str	r3, [r7, #12]
  
  switch (tmp)
 80002e4:	68fb      	ldr	r3, [r7, #12]
 80002e6:	2b08      	cmp	r3, #8
 80002e8:	d011      	beq.n	800030e <SystemCoreClockUpdate+0x46>
 80002ea:	68fb      	ldr	r3, [r7, #12]
 80002ec:	2b08      	cmp	r3, #8
 80002ee:	d83a      	bhi.n	8000366 <SystemCoreClockUpdate+0x9e>
 80002f0:	68fb      	ldr	r3, [r7, #12]
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d003      	beq.n	80002fe <SystemCoreClockUpdate+0x36>
 80002f6:	68fb      	ldr	r3, [r7, #12]
 80002f8:	2b04      	cmp	r3, #4
 80002fa:	d004      	beq.n	8000306 <SystemCoreClockUpdate+0x3e>
 80002fc:	e033      	b.n	8000366 <SystemCoreClockUpdate+0x9e>
  {
    case 0x00:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 80002fe:	4b27      	ldr	r3, [pc, #156]	; (800039c <SystemCoreClockUpdate+0xd4>)
 8000300:	4a27      	ldr	r2, [pc, #156]	; (80003a0 <SystemCoreClockUpdate+0xd8>)
 8000302:	601a      	str	r2, [r3, #0]
      break;
 8000304:	e033      	b.n	800036e <SystemCoreClockUpdate+0xa6>
    case 0x04:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
 8000306:	4b25      	ldr	r3, [pc, #148]	; (800039c <SystemCoreClockUpdate+0xd4>)
 8000308:	4a25      	ldr	r2, [pc, #148]	; (80003a0 <SystemCoreClockUpdate+0xd8>)
 800030a:	601a      	str	r2, [r3, #0]
      break;
 800030c:	e02f      	b.n	800036e <SystemCoreClockUpdate+0xa6>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 800030e:	4b22      	ldr	r3, [pc, #136]	; (8000398 <SystemCoreClockUpdate+0xd0>)
 8000310:	685b      	ldr	r3, [r3, #4]
 8000312:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8000316:	60bb      	str	r3, [r7, #8]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8000318:	4b1f      	ldr	r3, [pc, #124]	; (8000398 <SystemCoreClockUpdate+0xd0>)
 800031a:	685b      	ldr	r3, [r3, #4]
 800031c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000320:	607b      	str	r3, [r7, #4]
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
 8000322:	68bb      	ldr	r3, [r7, #8]
 8000324:	0c9b      	lsrs	r3, r3, #18
 8000326:	3302      	adds	r3, #2
 8000328:	60bb      	str	r3, [r7, #8]
      
      if (pllsource == 0x00)
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	2b00      	cmp	r3, #0
 800032e:	d106      	bne.n	800033e <SystemCoreClockUpdate+0x76>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
 8000330:	68bb      	ldr	r3, [r7, #8]
 8000332:	4a1c      	ldr	r2, [pc, #112]	; (80003a4 <SystemCoreClockUpdate+0xdc>)
 8000334:	fb02 f303 	mul.w	r3, r2, r3
 8000338:	4a18      	ldr	r2, [pc, #96]	; (800039c <SystemCoreClockUpdate+0xd4>)
 800033a:	6013      	str	r3, [r2, #0]
          pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8 ) + 2; 
          SystemCoreClock = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
 800033c:	e017      	b.n	800036e <SystemCoreClockUpdate+0xa6>
        if ((RCC->CFGR & RCC_CFGR_PLLXTPRE) != (uint32_t)RESET)
 800033e:	4b16      	ldr	r3, [pc, #88]	; (8000398 <SystemCoreClockUpdate+0xd0>)
 8000340:	685b      	ldr	r3, [r3, #4]
 8000342:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000346:	2b00      	cmp	r3, #0
 8000348:	d006      	beq.n	8000358 <SystemCoreClockUpdate+0x90>
          SystemCoreClock = (HSE_VALUE >> 1) * pllmull;
 800034a:	68bb      	ldr	r3, [r7, #8]
 800034c:	4a15      	ldr	r2, [pc, #84]	; (80003a4 <SystemCoreClockUpdate+0xdc>)
 800034e:	fb02 f303 	mul.w	r3, r2, r3
 8000352:	4a12      	ldr	r2, [pc, #72]	; (800039c <SystemCoreClockUpdate+0xd4>)
 8000354:	6013      	str	r3, [r2, #0]
      break;
 8000356:	e00a      	b.n	800036e <SystemCoreClockUpdate+0xa6>
          SystemCoreClock = HSE_VALUE * pllmull;
 8000358:	68bb      	ldr	r3, [r7, #8]
 800035a:	4a11      	ldr	r2, [pc, #68]	; (80003a0 <SystemCoreClockUpdate+0xd8>)
 800035c:	fb02 f303 	mul.w	r3, r2, r3
 8000360:	4a0e      	ldr	r2, [pc, #56]	; (800039c <SystemCoreClockUpdate+0xd4>)
 8000362:	6013      	str	r3, [r2, #0]
      break;
 8000364:	e003      	b.n	800036e <SystemCoreClockUpdate+0xa6>

    default:
      SystemCoreClock = HSI_VALUE;
 8000366:	4b0d      	ldr	r3, [pc, #52]	; (800039c <SystemCoreClockUpdate+0xd4>)
 8000368:	4a0d      	ldr	r2, [pc, #52]	; (80003a0 <SystemCoreClockUpdate+0xd8>)
 800036a:	601a      	str	r2, [r3, #0]
      break;
 800036c:	bf00      	nop
  }
  
  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 800036e:	4b0a      	ldr	r3, [pc, #40]	; (8000398 <SystemCoreClockUpdate+0xd0>)
 8000370:	685b      	ldr	r3, [r3, #4]
 8000372:	091b      	lsrs	r3, r3, #4
 8000374:	f003 030f 	and.w	r3, r3, #15
 8000378:	4a0b      	ldr	r2, [pc, #44]	; (80003a8 <SystemCoreClockUpdate+0xe0>)
 800037a:	5cd3      	ldrb	r3, [r2, r3]
 800037c:	b2db      	uxtb	r3, r3
 800037e:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;  
 8000380:	4b06      	ldr	r3, [pc, #24]	; (800039c <SystemCoreClockUpdate+0xd4>)
 8000382:	681a      	ldr	r2, [r3, #0]
 8000384:	68fb      	ldr	r3, [r7, #12]
 8000386:	fa22 f303 	lsr.w	r3, r2, r3
 800038a:	4a04      	ldr	r2, [pc, #16]	; (800039c <SystemCoreClockUpdate+0xd4>)
 800038c:	6013      	str	r3, [r2, #0]
}
 800038e:	bf00      	nop
 8000390:	3714      	adds	r7, #20
 8000392:	46bd      	mov	sp, r7
 8000394:	bc80      	pop	{r7}
 8000396:	4770      	bx	lr
 8000398:	40021000 	.word	0x40021000
 800039c:	20000000 	.word	0x20000000
 80003a0:	007a1200 	.word	0x007a1200
 80003a4:	003d0900 	.word	0x003d0900
 80003a8:	20000004 	.word	0x20000004

080003ac <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 80003b0:	f000 f802 	bl	80003b8 <SetSysClockTo72>
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 80003b4:	bf00      	nop
 80003b6:	bd80      	pop	{r7, pc}

080003b8 <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 80003b8:	b480      	push	{r7}
 80003ba:	b083      	sub	sp, #12
 80003bc:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80003be:	2300      	movs	r3, #0
 80003c0:	607b      	str	r3, [r7, #4]
 80003c2:	2300      	movs	r3, #0
 80003c4:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80003c6:	4b3a      	ldr	r3, [pc, #232]	; (80004b0 <SetSysClockTo72+0xf8>)
 80003c8:	681b      	ldr	r3, [r3, #0]
 80003ca:	4a39      	ldr	r2, [pc, #228]	; (80004b0 <SetSysClockTo72+0xf8>)
 80003cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80003d0:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80003d2:	4b37      	ldr	r3, [pc, #220]	; (80004b0 <SetSysClockTo72+0xf8>)
 80003d4:	681b      	ldr	r3, [r3, #0]
 80003d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80003da:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	3301      	adds	r3, #1
 80003e0:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80003e2:	683b      	ldr	r3, [r7, #0]
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	d103      	bne.n	80003f0 <SetSysClockTo72+0x38>
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80003ee:	d1f0      	bne.n	80003d2 <SetSysClockTo72+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80003f0:	4b2f      	ldr	r3, [pc, #188]	; (80004b0 <SetSysClockTo72+0xf8>)
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d002      	beq.n	8000402 <SetSysClockTo72+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 80003fc:	2301      	movs	r3, #1
 80003fe:	603b      	str	r3, [r7, #0]
 8000400:	e001      	b.n	8000406 <SetSysClockTo72+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8000402:	2300      	movs	r3, #0
 8000404:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 8000406:	683b      	ldr	r3, [r7, #0]
 8000408:	2b01      	cmp	r3, #1
 800040a:	d14b      	bne.n	80004a4 <SetSysClockTo72+0xec>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 800040c:	4b29      	ldr	r3, [pc, #164]	; (80004b4 <SetSysClockTo72+0xfc>)
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	4a28      	ldr	r2, [pc, #160]	; (80004b4 <SetSysClockTo72+0xfc>)
 8000412:	f043 0310 	orr.w	r3, r3, #16
 8000416:	6013      	str	r3, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 8000418:	4b26      	ldr	r3, [pc, #152]	; (80004b4 <SetSysClockTo72+0xfc>)
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	4a25      	ldr	r2, [pc, #148]	; (80004b4 <SetSysClockTo72+0xfc>)
 800041e:	f023 0303 	bic.w	r3, r3, #3
 8000422:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 8000424:	4b23      	ldr	r3, [pc, #140]	; (80004b4 <SetSysClockTo72+0xfc>)
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	4a22      	ldr	r2, [pc, #136]	; (80004b4 <SetSysClockTo72+0xfc>)
 800042a:	f043 0302 	orr.w	r3, r3, #2
 800042e:	6013      	str	r3, [r2, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8000430:	4b1f      	ldr	r3, [pc, #124]	; (80004b0 <SetSysClockTo72+0xf8>)
 8000432:	4a1f      	ldr	r2, [pc, #124]	; (80004b0 <SetSysClockTo72+0xf8>)
 8000434:	685b      	ldr	r3, [r3, #4]
 8000436:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8000438:	4b1d      	ldr	r3, [pc, #116]	; (80004b0 <SetSysClockTo72+0xf8>)
 800043a:	4a1d      	ldr	r2, [pc, #116]	; (80004b0 <SetSysClockTo72+0xf8>)
 800043c:	685b      	ldr	r3, [r3, #4]
 800043e:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 8000440:	4b1b      	ldr	r3, [pc, #108]	; (80004b0 <SetSysClockTo72+0xf8>)
 8000442:	685b      	ldr	r3, [r3, #4]
 8000444:	4a1a      	ldr	r2, [pc, #104]	; (80004b0 <SetSysClockTo72+0xf8>)
 8000446:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800044a:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 800044c:	4b18      	ldr	r3, [pc, #96]	; (80004b0 <SetSysClockTo72+0xf8>)
 800044e:	685b      	ldr	r3, [r3, #4]
 8000450:	4a17      	ldr	r2, [pc, #92]	; (80004b0 <SetSysClockTo72+0xf8>)
 8000452:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8000456:	6053      	str	r3, [r2, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 8000458:	4b15      	ldr	r3, [pc, #84]	; (80004b0 <SetSysClockTo72+0xf8>)
 800045a:	685b      	ldr	r3, [r3, #4]
 800045c:	4a14      	ldr	r2, [pc, #80]	; (80004b0 <SetSysClockTo72+0xf8>)
 800045e:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 8000462:	6053      	str	r3, [r2, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8000464:	4b12      	ldr	r3, [pc, #72]	; (80004b0 <SetSysClockTo72+0xf8>)
 8000466:	681b      	ldr	r3, [r3, #0]
 8000468:	4a11      	ldr	r2, [pc, #68]	; (80004b0 <SetSysClockTo72+0xf8>)
 800046a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800046e:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000470:	bf00      	nop
 8000472:	4b0f      	ldr	r3, [pc, #60]	; (80004b0 <SetSysClockTo72+0xf8>)
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800047a:	2b00      	cmp	r3, #0
 800047c:	d0f9      	beq.n	8000472 <SetSysClockTo72+0xba>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 800047e:	4b0c      	ldr	r3, [pc, #48]	; (80004b0 <SetSysClockTo72+0xf8>)
 8000480:	685b      	ldr	r3, [r3, #4]
 8000482:	4a0b      	ldr	r2, [pc, #44]	; (80004b0 <SetSysClockTo72+0xf8>)
 8000484:	f023 0303 	bic.w	r3, r3, #3
 8000488:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 800048a:	4b09      	ldr	r3, [pc, #36]	; (80004b0 <SetSysClockTo72+0xf8>)
 800048c:	685b      	ldr	r3, [r3, #4]
 800048e:	4a08      	ldr	r2, [pc, #32]	; (80004b0 <SetSysClockTo72+0xf8>)
 8000490:	f043 0302 	orr.w	r3, r3, #2
 8000494:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 8000496:	bf00      	nop
 8000498:	4b05      	ldr	r3, [pc, #20]	; (80004b0 <SetSysClockTo72+0xf8>)
 800049a:	685b      	ldr	r3, [r3, #4]
 800049c:	f003 030c 	and.w	r3, r3, #12
 80004a0:	2b08      	cmp	r3, #8
 80004a2:	d1f9      	bne.n	8000498 <SetSysClockTo72+0xe0>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
 80004a4:	bf00      	nop
 80004a6:	370c      	adds	r7, #12
 80004a8:	46bd      	mov	sp, r7
 80004aa:	bc80      	pop	{r7}
 80004ac:	4770      	bx	lr
 80004ae:	bf00      	nop
 80004b0:	40021000 	.word	0x40021000
 80004b4:	40022000 	.word	0x40022000

080004b8 <usart_send_str>:
#include "usart.h"
#include "gpio.h"
#include "../lib/common.h"

void usart_send_str(char *s)
{
 80004b8:	b480      	push	{r7}
 80004ba:	b083      	sub	sp, #12
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
	while (*s) {
 80004c0:	e00f      	b.n	80004e2 <usart_send_str+0x2a>
		while (!((USART2->SR) & USART_SR_TXE));
 80004c2:	bf00      	nop
 80004c4:	4b0c      	ldr	r3, [pc, #48]	; (80004f8 <usart_send_str+0x40>)
 80004c6:	881b      	ldrh	r3, [r3, #0]
 80004c8:	b29b      	uxth	r3, r3
 80004ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d0f8      	beq.n	80004c4 <usart_send_str+0xc>

		USART2->DR = *s;
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	781a      	ldrb	r2, [r3, #0]
 80004d6:	4b08      	ldr	r3, [pc, #32]	; (80004f8 <usart_send_str+0x40>)
 80004d8:	b292      	uxth	r2, r2
 80004da:	809a      	strh	r2, [r3, #4]

		s++ ;
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	3301      	adds	r3, #1
 80004e0:	607b      	str	r3, [r7, #4]
	while (*s) {
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	781b      	ldrb	r3, [r3, #0]
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d1eb      	bne.n	80004c2 <usart_send_str+0xa>
	}
}
 80004ea:	bf00      	nop
 80004ec:	bf00      	nop
 80004ee:	370c      	adds	r7, #12
 80004f0:	46bd      	mov	sp, r7
 80004f2:	bc80      	pop	{r7}
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop
 80004f8:	40004400 	.word	0x40004400

080004fc <usart_clk_enable>:


void usart_clk_enable(void)
{
 80004fc:	b480      	push	{r7}
 80004fe:	af00      	add	r7, sp, #0
	SET_BIT(RCC->APB2ENR ,RCC_APB2ENR_USART1EN) ;
 8000500:	4b07      	ldr	r3, [pc, #28]	; (8000520 <usart_clk_enable+0x24>)
 8000502:	699b      	ldr	r3, [r3, #24]
 8000504:	4a06      	ldr	r2, [pc, #24]	; (8000520 <usart_clk_enable+0x24>)
 8000506:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800050a:	6193      	str	r3, [r2, #24]
	SET_BIT(RCC->APB1ENR ,RCC_APB1ENR_USART2EN) ;
 800050c:	4b04      	ldr	r3, [pc, #16]	; (8000520 <usart_clk_enable+0x24>)
 800050e:	69db      	ldr	r3, [r3, #28]
 8000510:	4a03      	ldr	r2, [pc, #12]	; (8000520 <usart_clk_enable+0x24>)
 8000512:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000516:	61d3      	str	r3, [r2, #28]
	//SET_BIT(RCC->APB1ENR ,RCC_APB1ENR_USART3EN) ; // Enable USART3 ,qemu failed but success at keil
}
 8000518:	bf00      	nop
 800051a:	46bd      	mov	sp, r7
 800051c:	bc80      	pop	{r7}
 800051e:	4770      	bx	lr
 8000520:	40021000 	.word	0x40021000

08000524 <config_gpio_for_usart>:
 * USART3	TX----PB10
 * 			RX----PB11
 * 
 */ 
int config_gpio_for_usart(USART_TypeDef * usartx)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b082      	sub	sp, #8
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
	if (usartx == USART1) {
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	4a2a      	ldr	r2, [pc, #168]	; (80005d8 <config_gpio_for_usart+0xb4>)
 8000530:	4293      	cmp	r3, r2
 8000532:	d115      	bne.n	8000560 <config_gpio_for_usart+0x3c>
		//Pull-up PA10 for USART1 ,GPIOA->ODR |= (1 << 10) ;	
		SET_SINGLE_BIT(GPIOA->ODR ,10) ;
 8000534:	4b29      	ldr	r3, [pc, #164]	; (80005dc <config_gpio_for_usart+0xb8>)
 8000536:	68db      	ldr	r3, [r3, #12]
 8000538:	4a28      	ldr	r2, [pc, #160]	; (80005dc <config_gpio_for_usart+0xb8>)
 800053a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800053e:	60d3      	str	r3, [r2, #12]

		// Config GPIO for USART1
		config_gpio_mode(GPIOA ,9 ,MODE_OUTPUT_50M) ;
 8000540:	220b      	movs	r2, #11
 8000542:	2109      	movs	r1, #9
 8000544:	4825      	ldr	r0, [pc, #148]	; (80005dc <config_gpio_for_usart+0xb8>)
 8000546:	f7ff fe1b 	bl	8000180 <config_gpio_mode>
		config_gpio_cnf(GPIOA ,9 ,ALT_OUT_PUSHPULL) ;
 800054a:	220a      	movs	r2, #10
 800054c:	2109      	movs	r1, #9
 800054e:	4823      	ldr	r0, [pc, #140]	; (80005dc <config_gpio_for_usart+0xb8>)
 8000550:	f7ff fe44 	bl	80001dc <config_gpio_cnf>
		config_gpio_mode(GPIOA ,10 ,MODE_INPUT) ;
 8000554:	2200      	movs	r2, #0
 8000556:	210a      	movs	r1, #10
 8000558:	4820      	ldr	r0, [pc, #128]	; (80005dc <config_gpio_for_usart+0xb8>)
 800055a:	f7ff fe11 	bl	8000180 <config_gpio_mode>
 800055e:	e036      	b.n	80005ce <config_gpio_for_usart+0xaa>

	} else if (usartx == USART2) {
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	4a1f      	ldr	r2, [pc, #124]	; (80005e0 <config_gpio_for_usart+0xbc>)
 8000564:	4293      	cmp	r3, r2
 8000566:	d115      	bne.n	8000594 <config_gpio_for_usart+0x70>
		//Pull-up PA3 for USART2 ,GPIOA->ODR |= (1 << 3) ;	
		SET_SINGLE_BIT(GPIOA->ODR ,3) ;
 8000568:	4b1c      	ldr	r3, [pc, #112]	; (80005dc <config_gpio_for_usart+0xb8>)
 800056a:	68db      	ldr	r3, [r3, #12]
 800056c:	4a1b      	ldr	r2, [pc, #108]	; (80005dc <config_gpio_for_usart+0xb8>)
 800056e:	f043 0308 	orr.w	r3, r3, #8
 8000572:	60d3      	str	r3, [r2, #12]

		//Config GPIO for USART2
		config_gpio_mode(GPIOA ,2 ,MODE_OUTPUT_50M) ;
 8000574:	220b      	movs	r2, #11
 8000576:	2102      	movs	r1, #2
 8000578:	4818      	ldr	r0, [pc, #96]	; (80005dc <config_gpio_for_usart+0xb8>)
 800057a:	f7ff fe01 	bl	8000180 <config_gpio_mode>
		config_gpio_cnf(GPIOA ,2 ,ALT_OUT_PUSHPULL) ;
 800057e:	220a      	movs	r2, #10
 8000580:	2102      	movs	r1, #2
 8000582:	4816      	ldr	r0, [pc, #88]	; (80005dc <config_gpio_for_usart+0xb8>)
 8000584:	f7ff fe2a 	bl	80001dc <config_gpio_cnf>
		config_gpio_mode(GPIOA ,3 ,MODE_INPUT) ;
 8000588:	2200      	movs	r2, #0
 800058a:	2103      	movs	r1, #3
 800058c:	4813      	ldr	r0, [pc, #76]	; (80005dc <config_gpio_for_usart+0xb8>)
 800058e:	f7ff fdf7 	bl	8000180 <config_gpio_mode>
 8000592:	e01c      	b.n	80005ce <config_gpio_for_usart+0xaa>

	} else if (usartx == USART3) {
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	4a13      	ldr	r2, [pc, #76]	; (80005e4 <config_gpio_for_usart+0xc0>)
 8000598:	4293      	cmp	r3, r2
 800059a:	d115      	bne.n	80005c8 <config_gpio_for_usart+0xa4>
		//Pull-up PB11 for USART3 ,GPIOB->ODR |= (1 << 11) ;	
		SET_SINGLE_BIT(GPIOB->ODR ,11) ;
 800059c:	4b12      	ldr	r3, [pc, #72]	; (80005e8 <config_gpio_for_usart+0xc4>)
 800059e:	68db      	ldr	r3, [r3, #12]
 80005a0:	4a11      	ldr	r2, [pc, #68]	; (80005e8 <config_gpio_for_usart+0xc4>)
 80005a2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80005a6:	60d3      	str	r3, [r2, #12]

		//Config GPIO for USART3
		config_gpio_mode(GPIOB ,10 ,MODE_OUTPUT_50M) ;
 80005a8:	220b      	movs	r2, #11
 80005aa:	210a      	movs	r1, #10
 80005ac:	480e      	ldr	r0, [pc, #56]	; (80005e8 <config_gpio_for_usart+0xc4>)
 80005ae:	f7ff fde7 	bl	8000180 <config_gpio_mode>
		config_gpio_cnf(GPIOB ,10 ,ALT_OUT_PUSHPULL) ;
 80005b2:	220a      	movs	r2, #10
 80005b4:	210a      	movs	r1, #10
 80005b6:	480c      	ldr	r0, [pc, #48]	; (80005e8 <config_gpio_for_usart+0xc4>)
 80005b8:	f7ff fe10 	bl	80001dc <config_gpio_cnf>
		config_gpio_mode(GPIOB ,11 ,MODE_INPUT) ;
 80005bc:	2200      	movs	r2, #0
 80005be:	210b      	movs	r1, #11
 80005c0:	4809      	ldr	r0, [pc, #36]	; (80005e8 <config_gpio_for_usart+0xc4>)
 80005c2:	f7ff fddd 	bl	8000180 <config_gpio_mode>
 80005c6:	e002      	b.n	80005ce <config_gpio_for_usart+0xaa>

	} else {
		return -1 ;
 80005c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80005cc:	e000      	b.n	80005d0 <config_gpio_for_usart+0xac>
	}

	return 0 ;
 80005ce:	2300      	movs	r3, #0

}
 80005d0:	4618      	mov	r0, r3
 80005d2:	3708      	adds	r7, #8
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	40013800 	.word	0x40013800
 80005dc:	40010800 	.word	0x40010800
 80005e0:	40004400 	.word	0x40004400
 80005e4:	40004800 	.word	0x40004800
 80005e8:	40010c00 	.word	0x40010c00

080005ec <usart_init>:


void usart_init(USART_TypeDef * usartx)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b082      	sub	sp, #8
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
	gpio_clk_enable() ;	// Enable clks for GPIOA and GPIOB
 80005f4:	f7ff fdb0 	bl	8000158 <gpio_clk_enable>
	config_gpio_for_usart(usartx) ;	//Config GPIO for USARTx
 80005f8:	6878      	ldr	r0, [r7, #4]
 80005fa:	f7ff ff93 	bl	8000524 <config_gpio_for_usart>
	
	usart_clk_enable() ;
 80005fe:	f7ff ff7d 	bl	80004fc <usart_clk_enable>
	
	//usartx->CR1 |=  (TRANSMITTER_ENABLE << TRANSMITTER_BIT_SHIFT) ;
	//usartx->CR1 |= (RECEIVER_ENABLE << RECEIVER_BIT_SHIFT) ; 

	// Enable Receiver
}
 8000602:	bf00      	nop
 8000604:	3708      	adds	r7, #8
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop

0800060c <Reset_Handler>:
 800060c:	2100      	movs	r1, #0
 800060e:	e003      	b.n	8000618 <LoopCopyDataInit>

08000610 <CopyDataInit>:
 8000610:	4b0a      	ldr	r3, [pc, #40]	; (800063c <LoopFillZerobss+0x10>)
 8000612:	585b      	ldr	r3, [r3, r1]
 8000614:	5043      	str	r3, [r0, r1]
 8000616:	3104      	adds	r1, #4

08000618 <LoopCopyDataInit>:
 8000618:	4809      	ldr	r0, [pc, #36]	; (8000640 <LoopFillZerobss+0x14>)
 800061a:	4b0a      	ldr	r3, [pc, #40]	; (8000644 <LoopFillZerobss+0x18>)
 800061c:	1842      	adds	r2, r0, r1
 800061e:	429a      	cmp	r2, r3
 8000620:	d3f6      	bcc.n	8000610 <CopyDataInit>
 8000622:	4a09      	ldr	r2, [pc, #36]	; (8000648 <LoopFillZerobss+0x1c>)
 8000624:	e002      	b.n	800062c <LoopFillZerobss>

08000626 <FillZerobss>:
 8000626:	2300      	movs	r3, #0
 8000628:	f842 3b04 	str.w	r3, [r2], #4

0800062c <LoopFillZerobss>:
 800062c:	4b07      	ldr	r3, [pc, #28]	; (800064c <LoopFillZerobss+0x20>)
 800062e:	429a      	cmp	r2, r3
 8000630:	d3f9      	bcc.n	8000626 <FillZerobss>
 8000632:	f7ff fe15 	bl	8000260 <SystemInit>
 8000636:	f7ff fd69 	bl	800010c <main>
 800063a:	4770      	bx	lr
 800063c:	08000663 	.word	0x08000663
 8000640:	20000000 	.word	0x20000000
 8000644:	20000014 	.word	0x20000014
 8000648:	20000014 	.word	0x20000014
 800064c:	20000014 	.word	0x20000014

08000650 <ADC1_2_IRQHandler>:
 8000650:	e7fe      	b.n	8000650 <ADC1_2_IRQHandler>
 8000652:	0000      	movs	r0, r0
 8000654:	6c6c6548 	.word	0x6c6c6548
 8000658:	6f57206f 	.word	0x6f57206f
 800065c:	21646c72 	.word	0x21646c72
 8000660:	000a      	.short	0x000a
	...
